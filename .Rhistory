# Vector of product abbreviations
products <- c("tom", "leaf", "ban", "man", "fj", "milk", "cof", "tea", "mill", "chic", "daal", "wht", "rice", "nut")
# Define a function to summarize data for a given product and dataset
tab6_product_fn_india <- function(product) {
tab6_data_india %>%
summarise(
org_count = sum(get(paste0(product, "_org")) == "Yes", na.rm = TRUE),
term_organic_count = sum(get(paste0(product, "_org_terms_Organic")) == 1, na.rm = TRUE),
term_organic_perc = term_organic_count / org_count,
term_natural_count = sum(get(paste0(product, "_org_terms_Natural")) == 1, na.rm = TRUE),
term_natural_perc = term_natural_count / org_count,
term_chemfree_count = sum(get(paste0(product, "_org_terms_Chemical-free")) == 1, na.rm = TRUE),
term_chemfree_perc = term_chemfree_count / org_count,
term_pestfree_count = sum(get(paste0(product, "_org_terms_Pesticide-free")) == 1, na.rm = TRUE),
term_pestfree_perc = term_pestfree_count / org_count,
term_bioprod_count = sum(get(paste0(product, "_org_terms_Bioproducts")) == 1, na.rm = TRUE),
term_bioprod_perc = term_bioprod_count / org_count,
term_bio_count = sum(get(paste0(product, "_org_terms_Bio")) == 1, na.rm = TRUE),
term_bio_perc = term_bio_count / org_count,
term_eco_count = sum(get(paste0(product, "_org_terms_Eco")) == 1, na.rm = TRUE),
term_eco_perc = term_eco_count / org_count,
term_gmo_count = sum(get(paste0(product, "_org_terms_GMO-free")) == 1, na.rm = TRUE),
term_gmo_perc = term_gmo_count / org_count,
#term_dontknow_count = sum(get(paste0(product, "_org_terms_Don't know")) == 1, na.rm = TRUE),
#term_dontknow_perc = term_dontknow_count / org_count
) %>%
mutate(
product = product,
category = case_when(product %in% c("fj", "milk", "cof", "tea") ~ "beverages",
product %in% c("tom", "leaf", "ban", "man") ~ "fresh produce",
TRUE ~ "other")
) %>%
select(category, product, everything())
}
# Apply the function to each product and combine the results
product_summary_list_india <- lapply(products, tab6_product_fn_india)
tab6_product_summary_india <- bind_rows(product_summary_list_india)
## CATEGORY-LEVEL SUMMARY
tab6_category_summary_india <- tab6_product_summary_india %>%
group_by(category) %>%
summarise(
org_count = sum(org_count, na.rm = TRUE),
term_organic_count = sum(term_organic_count, na.rm = TRUE),
term_organic_perc = mean(term_organic_perc, na.rm = TRUE),
term_natural_count = sum(term_natural_count, na.rm = TRUE),
term_natural_perc = mean(term_natural_perc, na.rm = TRUE),
term_chemfree_count = sum(term_chemfree_count, na.rm = TRUE),
term_chemfree_perc = mean(term_chemfree_perc, na.rm = TRUE),
term_pestfree_count = sum(term_pestfree_count, na.rm = TRUE),
term_pestfree_perc = mean(term_pestfree_perc, na.rm = TRUE),
term_bioprod_count = sum(term_bioprod_count, na.rm = TRUE),
term_bioprod_perc = mean(term_bioprod_perc, na.rm = TRUE),
term_bio_count = sum(term_bio_count, na.rm = TRUE),
term_bio_perc = mean(term_bio_perc, na.rm = TRUE),
term_eco_count = sum(term_eco_count, na.rm = TRUE),
term_eco_perc = mean(term_eco_perc, na.rm = TRUE),
term_gmo_count = sum(term_gmo_count, na.rm = TRUE),
term_gmo_perc = mean(term_gmo_perc, na.rm = TRUE),
#term_dontknow_count = sum(term_dontknow_count, na.rm = TRUE),
#term_dontknow_perc = mean(term_dontknow_perc, na.rm = TRUE)
)
# Create gt table
tab6_categories_india <- tab6_category_summary_india %>%
gt() %>%
cols_label(
category = "Category",
org_count = "Total organic products",
term_organic_count = "Organic, n(%)",
term_organic_perc = " ",
term_natural_count = "Natural, n(%)",
term_natural_perc = " ",
term_chemfree_count = "Chemical-free, n(%)",
term_chemfree_perc = " ",
term_pestfree_count = "Pesticide-free, n(%)",
term_pestfree_perc = " ",
term_bioprod_count = "Bioproduct, n(%)",
term_bioprod_perc = " ",
term_bio_count = "Bio, n(%)",
term_bio_perc = " ",
term_eco_count = "Eco, n(%)",
term_eco_perc = " ",
term_gmo_count = "GMO-free, n(%)",
term_gmo_perc = " ",
#term_dontknow_count = "Don't know, n(%)",
#term_dontknow_perc = " ",
) %>%
cols_merge(
columns = c("term_organic_count", "term_organic_perc"),
pattern = "{1} ({2})"
) %>%
cols_merge(
columns = c("term_natural_count", "term_natural_perc"),
pattern = "{1} ({2})"
) %>%
cols_merge(
columns = c("term_chemfree_count", "term_chemfree_perc"),
pattern = "{1} ({2})"
) %>%
cols_merge(
columns = c("term_pestfree_count", "term_pestfree_perc"),
pattern = "{1} ({2})"
) %>%
cols_merge(
columns = c("term_bioprod_count", "term_bioprod_perc"),
pattern = "{1} ({2})"
) %>%
cols_merge(
columns = c("term_bio_count", "term_bio_perc"),
pattern = "{1} ({2})"
) %>%
cols_merge(
columns = c("term_eco_count", "term_eco_perc"),
pattern = "{1} ({2})"
) %>%
cols_merge(
columns = c("term_gmo_count", "term_gmo_perc"),
pattern = "{1} ({2})"
) %>%
#cols_merge(
#  columns = c("term_dontknow_count", "term_dontknow_perc"),
#  pattern = "{1} ({2})"
#) %>%
fmt_percent(
columns = c(term_organic_perc, term_natural_perc, term_chemfree_perc,
term_pestfree_perc, term_bioprod_perc, term_bio_perc,
term_eco_perc, term_gmo_perc),
decimals = 0
) %>%
tab_header(
title = "Table 6 - India"
) %>%
grand_summary_rows(
columns = c(org_count, term_organic_count, term_natural_count, term_chemfree_count,
term_pestfree_count, term_bioprod_count, term_bio_count,
term_eco_count, term_gmo_count),
fns = list(total = ~sum(., na.rm = TRUE)),
formatter = fmt_number,
decimals = 0,
) %>%
sub_missing()
# Display the table
tab6_categories_india
# Export to table_outputs workbook
addWorksheet(table_outputs, "Table 6 - India")
writeData(table_outputs, sheet = "Table 6 - India", x = tab6_categories_india)
saveWorkbook(table_outputs, "C:/Users/s1985751/Documents/GitHub/fea/table_outputs.xlsx", overwrite = TRUE)
# Create new instance of dataset for Table 6 - UK
tab6_data_uk <- tab6_data %>%
filter(country == "UK")
# PRODUCT-LEVEL SUMMARY
# Vector of product abbreviations
products <- c("tom", "leaf", "ban", "man", "fj", "milk", "cof", "tea", "mill", "chic", "daal", "wht", "rice", "nut")
# Define a function to summarize data for a given product and dataset
tab6_product_fn_uk <- function(product) {
tab6_data_uk %>%
summarise(
org_count = sum(get(paste0(product, "_org")) == "Yes", na.rm = TRUE),
term_organic_count = sum(get(paste0(product, "_org_terms_Organic")) == 1, na.rm = TRUE),
term_organic_perc = term_organic_count / org_count,
term_natural_count = sum(get(paste0(product, "_org_terms_Natural")) == 1, na.rm = TRUE),
term_natural_perc = term_natural_count / org_count,
term_chemfree_count = sum(get(paste0(product, "_org_terms_Chemical-free")) == 1, na.rm = TRUE),
term_chemfree_perc = term_chemfree_count / org_count,
term_pestfree_count = sum(get(paste0(product, "_org_terms_Pesticide-free")) == 1, na.rm = TRUE),
term_pestfree_perc = term_pestfree_count / org_count,
term_bioprod_count = sum(get(paste0(product, "_org_terms_Bioproducts")) == 1, na.rm = TRUE),
term_bioprod_perc = term_bioprod_count / org_count,
term_bio_count = sum(get(paste0(product, "_org_terms_Bio")) == 1, na.rm = TRUE),
term_bio_perc = term_bio_count / org_count,
term_eco_count = sum(get(paste0(product, "_org_terms_Eco")) == 1, na.rm = TRUE),
term_eco_perc = term_eco_count / org_count,
term_gmo_count = sum(get(paste0(product, "_org_terms_GMO-free")) == 1, na.rm = TRUE),
term_gmo_perc = term_gmo_count / org_count,
#term_dontknow_count = sum(get(paste0(product, "_org_terms_Don't know")) == 1, na.rm = TRUE),
#term_dontknow_perc = term_dontknow_count / org_count
) %>%
mutate(
product = product,
category = case_when(product %in% c("fj", "milk", "cof", "tea") ~ "beverages",
product %in% c("tom", "leaf", "ban", "man") ~ "fresh produce",
TRUE ~ "other")
) %>%
select(category, product, everything())
}
# Apply the function to each product and combine the results
product_summary_list_uk <- lapply(products, tab6_product_fn_uk)
tab6_product_summary_uk <- bind_rows(product_summary_list_uk)
## CATEGORY-LEVEL SUMMARY
tab6_category_summary_uk <- tab6_product_summary_uk %>%
group_by(category) %>%
summarise(
org_count = sum(org_count, na.rm = TRUE),
term_organic_count = sum(term_organic_count, na.rm = TRUE),
term_organic_perc = mean(term_organic_perc, na.rm = TRUE),
term_natural_count = sum(term_natural_count, na.rm = TRUE),
term_natural_perc = mean(term_natural_perc, na.rm = TRUE),
term_chemfree_count = sum(term_chemfree_count, na.rm = TRUE),
term_chemfree_perc = mean(term_chemfree_perc, na.rm = TRUE),
term_pestfree_count = sum(term_pestfree_count, na.rm = TRUE),
term_pestfree_perc = mean(term_pestfree_perc, na.rm = TRUE),
term_bioprod_count = sum(term_bioprod_count, na.rm = TRUE),
term_bioprod_perc = mean(term_bioprod_perc, na.rm = TRUE),
term_bio_count = sum(term_bio_count, na.rm = TRUE),
term_bio_perc = mean(term_bio_perc, na.rm = TRUE),
term_eco_count = sum(term_eco_count, na.rm = TRUE),
term_eco_perc = mean(term_eco_perc, na.rm = TRUE),
term_gmo_count = sum(term_gmo_count, na.rm = TRUE),
term_gmo_perc = mean(term_gmo_perc, na.rm = TRUE),
#term_dontknow_count = sum(term_dontknow_count, na.rm = TRUE),
#term_dontknow_perc = mean(term_dontknow_perc, na.rm = TRUE)
)
# Create gt table
tab6_categories_uk <- tab6_category_summary_uk %>%
gt() %>%
cols_label(
category = "Category",
org_count = "Total organic products",
term_organic_count = "Organic, n(%)",
term_organic_perc = " ",
term_natural_count = "Natural, n(%)",
term_natural_perc = " ",
term_chemfree_count = "Chemical-free, n(%)",
term_chemfree_perc = " ",
term_pestfree_count = "Pesticide-free, n(%)",
term_pestfree_perc = " ",
term_bioprod_count = "Bioproduct, n(%)",
term_bioprod_perc = " ",
term_bio_count = "Bio, n(%)",
term_bio_perc = " ",
term_eco_count = "Eco, n(%)",
term_eco_perc = " ",
term_gmo_count = "GMO-free, n(%)",
term_gmo_perc = " ",
#term_dontknow_count = "Don't know, n(%)",
#term_dontknow_perc = " ",
) %>%
cols_merge(
columns = c("term_organic_count", "term_organic_perc"),
pattern = "{1} ({2})"
) %>%
cols_merge(
columns = c("term_natural_count", "term_natural_perc"),
pattern = "{1} ({2})"
) %>%
cols_merge(
columns = c("term_chemfree_count", "term_chemfree_perc"),
pattern = "{1} ({2})"
) %>%
cols_merge(
columns = c("term_pestfree_count", "term_pestfree_perc"),
pattern = "{1} ({2})"
) %>%
cols_merge(
columns = c("term_bioprod_count", "term_bioprod_perc"),
pattern = "{1} ({2})"
) %>%
cols_merge(
columns = c("term_bio_count", "term_bio_perc"),
pattern = "{1} ({2})"
) %>%
cols_merge(
columns = c("term_eco_count", "term_eco_perc"),
pattern = "{1} ({2})"
) %>%
cols_merge(
columns = c("term_gmo_count", "term_gmo_perc"),
pattern = "{1} ({2})"
) %>%
#cols_merge(
#  columns = c("term_dontknow_count", "term_dontknow_perc"),
#  pattern = "{1} ({2})"
#) %>%
fmt_percent(
columns = c(term_organic_perc, term_natural_perc, term_chemfree_perc,
term_pestfree_perc, term_bioprod_perc, term_bio_perc,
term_eco_perc, term_gmo_perc),
decimals = 0
) %>%
tab_header(
title = "Table 6 - UK"
) %>%
grand_summary_rows(
columns = c(org_count, term_organic_count, term_natural_count, term_chemfree_count,
term_pestfree_count, term_bioprod_count, term_bio_count,
term_eco_count, term_gmo_count),
fns = list(total = ~sum(., na.rm = TRUE)),
formatter = fmt_number,
decimals = 0,
) %>%
sub_missing()
# Display the table
tab6_categories_uk
# Export to table_outputs workbook
addWorksheet(table_outputs, "Table 6 - UK")
writeData(table_outputs, sheet = "Table 6 - UK", x = tab6_categories_uk)
saveWorkbook(table_outputs, "C:/Users/s1985751/Documents/GitHub/fea/table_outputs.xlsx", overwrite = TRUE)
# N, %, median and IQR - country level
tab2_overall <- data_clean %>%
summarize(
vendors = n(),
count_org_vendors = sum(org_vendor == 1, na.rm = TRUE),
org_vendor_perc = count_org_vendors / vendors,
median_org_foods_count = median(org_foods_count, na.rm = TRUE),
iqr_org_foods_count = IQR(org_foods_count, na.rm = TRUE)
) %>%
ungroup()
# Print
print(tab2_overall)
# N, %, median and IQR - overall
tab3_overall_data <- data_clean %>%
summarize(
organic_vendors = sum(org_vendor == 1, na.rm = TRUE),
n_multiple_org_binary = sum(multiple_org_binary == 1, na.rm = TRUE),
perc_multiple_org_binary = n_multiple_org_binary / organic_vendors,
median_multiple_org_count = median(multiple_org_count, na.rm = TRUE),
iqr_multiple_org_count = IQR(multiple_org_count, na.rm = TRUE)
) %>%
ungroup()
print(tab3_overall_data)
# N, %, median and IQR - country level
tab2_overall <- data_clean %>%
summarize(
vendors = n(),
count_org_vendors = sum(org_vendor == 1, na.rm = TRUE),
org_vendor_perc = count_org_vendors / vendors,
median_org_foods_count = median(org_foods_count, na.rm = TRUE),
iqr_org_foods_count = IQR(org_foods_count, na.rm = TRUE)
) %>%
ungroup()
# Print
print(tab2_overall)
# Export to table_outputs workbook
addWorksheet(table_outputs, "Table 2 - overall")
writeData(table_outputs, sheet = "Table 2 - overall", x = tab2_overall)
saveWorkbook(table_outputs, "C:/Users/s1985751/Documents/GitHub/fea/table_outputs.xlsx", overwrite = TRUE)
# N, %, median and IQR - overall
tab3_overall_data <- data_clean %>%
summarize(
organic_vendors = sum(org_vendor == 1, na.rm = TRUE),
n_multiple_org_binary = sum(multiple_org_binary == 1, na.rm = TRUE),
perc_multiple_org_binary = n_multiple_org_binary / organic_vendors,
median_multiple_org_count = median(multiple_org_count, na.rm = TRUE),
iqr_multiple_org_count = IQR(multiple_org_count, na.rm = TRUE)
) %>%
ungroup()
print(tab3_overall_data)
# Export to table_outputs workbook
addWorksheet(table_outputs, "Table 3 - overall")
writeData(table_outputs, sheet = "Table 3 - overall", x = tab3_overall_data)
saveWorkbook(table_outputs, "C:/Users/s1985751/Documents/GitHub/fea/table_outputs.xlsx", overwrite = TRUE)
p_values_kruskal_overall <- result_overall$p.value
print(p_values_kruskal_overall)
# Create a vector of country names
country_names <- c("Brazil","India","UK")
# Create a vector of the result object names
kruskal_country_result_names <- c("result_brazil", "result_india", "result_uk")
# Retrieve results and store in a list
kruskal_country_result_list <- mget(kruskal_country_result_names)
# Print list to confirm
print(kruskal_country_result_list)
# Extract p-values from the results
p_values_kruskal_country <- sapply(kruskal_country_result_list, function(res) res$p.value)
# Create a dataframe
p_values_kruskal_country_df <- data.frame(
Country = country_names,
PValue = p_values_kruskal_country
)
print(p_values_kruskal_country_df)
# Create a vector of city names
city_names <- c("Rio de Janeiro","Sao Paolo","Sinop",
"Hyderabad","Latur","Visakhapatnam",
"Birmingham","Edinburgh","London")
# Create a vector of the result object names
kruskal_city_result_names <- c("result_rio","result_saopaulo","result_sinop",
"result_hyderabad","result_latur",
"result_visakhapatnam","result_birmingham",
"result_edinburgh","result_london")
# Retrieve results and store in a list
kruskal_city_result_list <- mget(kruskal_city_result_names)
# Print list to confirm
print(kruskal_city_result_list)
# Extract p-values from the results
p_values_kruskal_city <- sapply(kruskal_city_result_list, function(res) res$p.value)
# Create a dataframe
p_values_kruskal_city_df <- data.frame(
City = city_names,
PValue = p_values_kruskal_city
)
print(p_values_kruskal_city_df)
p_values_chi_overall <- chi_result_overall$p.value
print(p_values_chi_overall)
# Create a vector of country names
country_names <- c("Brazil","India","UK")
# Create a vector of the result object names
chi_country_result_names <- c("chi_result_brazil", "chi_result_india", "chi_result_uk")
# Retrieve results and store in a list
chi_country_result_list <- mget(chi_country_result_names)
# Print list to confirm
print(chi_country_result_list)
# Extract p-values from the results
p_values_chi_country <- sapply(chi_country_result_list, function(res) res$p.value)
# Create a dataframe
p_values_chi_country_df <- data.frame(
Country = country_names,
PValue = p_values_chi_country
)
print(p_values_chi_country_df)
# Create a vector of city names
city_names <- c("Rio de Janeiro","Sao Paolo","Sinop",
"Hyderabad","Latur","Visakhapatnam",
"Birmingham","Edinburgh","London")
# Create a vector of the result object names
chi_city_result_names <- c("chi_result_rio","chi_result_saopaulo",
"chi_result_sinop","chi_result_hyderabad",
"chi_result_latur","chi_result_visakhapatnam",
"chi_result_birmingham", "chi_result_edinburgh",
"chi_result_london")
# Retrieve results and store in a list
chi_city_result_list <- mget(chi_city_result_names)
# Print list to confirm
print(chi_city_result_list)
# Extract p-values from the results
p_values_chi_city <- sapply(chi_city_result_list, function(res) res$p.value)
# Create a dataframe
p_values_chi_city_df <- data.frame(
City = city_names,
PValue = p_values_chi_city
)
print(p_values_chi_city_df)
# N, %, median and IQR - neighbourhood level
tab3_neighbourhood_data <- data_clean %>%
group_by(country, city, circle) %>%
summarize(
organic_vendors = sum(org_vendor == 1, na.rm = TRUE),
n_multiple_org_binary = sum(multiple_org_binary == 1, na.rm = TRUE),
perc_multiple_org_binary = n_multiple_org_binary / organic_vendors,
median_multiple_org_count = median(multiple_org_count, na.rm = TRUE),
iqr_multiple_org_count = IQR(multiple_org_count, na.rm = TRUE)
) %>%
ungroup()
# Create the gt table
tab3_neighbourhood <- tab3_neighbourhood_data %>%
gt(rowname_col = "circle", groupname_col = c("country","city")) %>%
cols_label(
country = "Country",
city = "City",
circle = "Neighbourhood",
n_multiple_org_binary = "Organic vendors with multiple options (>1 product), n(%)",
perc_multiple_org_binary = " ",
median_multiple_org_count = "Foods with multiple options, median (IQR)",
iqr_multiple_org_count = " "
) %>%
fmt_percent(
columns = vars(perc_multiple_org_binary),
decimals = 0
) %>%
cols_merge(
columns = c("n_multiple_org_binary", "perc_multiple_org_binary"),
pattern = "{1} ({2})"
) %>%
cols_merge(
columns = c("median_multiple_org_count", "iqr_multiple_org_count"),
pattern = "{1} ({2})"
) %>%
sub_missing()
# Display the table
tab3_neighbourhood
# Export to table_outputs workbook
addWorksheet(table_outputs, "Table 3 - neighbourhood")
writeData(table_outputs, sheet = "Table 3 - neighbourhood", x = tab3_neighbourhood)
saveWorkbook(table_outputs, "C:/Users/s1985751/Documents/GitHub/fea/table_outputs.xlsx", overwrite = TRUE)
# N, %, median and IQR - city level
tab3_city_data <- data_clean %>%
group_by(country, city) %>%
summarize(
organic_vendors = sum(org_vendor == 1, na.rm = TRUE),
n_multiple_org_binary = sum(multiple_org_binary == 1, na.rm = TRUE),
perc_multiple_org_binary = n_multiple_org_binary / organic_vendors,
median_multiple_org_count = median(multiple_org_count, na.rm = TRUE),
iqr_multiple_org_count = IQR(multiple_org_count, na.rm = TRUE)
) %>%
ungroup()
# Create the gt table
tab3_city <- tab3_city_data %>%
gt(rowname_col = "city", groupname_col = "country") %>%
cols_label(
country = "Country",
city = "City",
n_multiple_org_binary = "Organic vendors with multiple options (>1 product), n(%)",
perc_multiple_org_binary = " ",
median_multiple_org_count = "Foods with multiple options, median (IQR)",
iqr_multiple_org_count = " "
) %>%
fmt_percent(
columns = vars(perc_multiple_org_binary),
decimals = 0
) %>%
cols_merge(
columns = c("n_multiple_org_binary", "perc_multiple_org_binary"),
pattern = "{1} ({2})"
) %>%
cols_merge(
columns = c("median_multiple_org_count", "iqr_multiple_org_count"),
pattern = "{1} ({2})"
) %>%
sub_missing()
# Display the table
tab3_city
# Export to table_outputs workbook
addWorksheet(table_outputs, "Table 3 - city")
writeData(table_outputs, sheet = "Table 3 - city", x = tab3_city)
saveWorkbook(table_outputs, "C:/Users/s1985751/Documents/GitHub/fea/table_outputs.xlsx", overwrite = TRUE)
