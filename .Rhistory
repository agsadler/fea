# Load necessary libraries
library(dplyr)
library(gmodels)
library(gt)
library(knitr)
library(kableExtra)
library(openxlsx)
library(readxl)
library(readr)
library(stats)
library(tidyr)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
# Set working directory
#setwd("C:/Users/s1985751/Documents/GitHub/fea")
# Load cleaned data
data_clean <- read.xlsx("data_clean.xlsx", sheet = "data")
# Create workbook for table data
table_outputs <- createWorkbook()
saveWorkbook(table_outputs, "Outputs/table_outputs.xlsx", overwrite = TRUE)
# Create new instance of dataset for Table 9
tab9_data <- data_clean
tab9_data2 <- tab9_data
# Vector with certification types variables
vector_certifcols2 <- tab9_data2 %>%
select(contains("_org_certif"))
tab9_data2 <- tab9_data2 %>%
select(id, country, city, contains("_org_certif"))
certifications <- createWorkbook()
addWorksheet(certifications, "Certifications")
writeData(certifications, sheet = "Certifications", x = tab9_data2)
saveWorkbook(certifications, "C:/Users/s1985751/Documents/GitHub/fea/certifications.xlsx", overwrite = TRUE)
# Vector with certification types variables
vector_certifcols <- tab9_data %>%
select(contains("_org_certif")) %>%
select(-matches("_org_certif_None|_org_certif_other_1|_org_certif_other_2|_org_certif_other_3|_org_certif_other_4|_org_certif_other_5")) %>%
names()
# Vector of product abbreviations
products <- c("ban","chic","cof","wht","fj","leaf","daal","man","milk","mill","nut","rice","tea","tom")
# Define a function to summarise number of certification types
tab9_product_fn <- function(product) {
tab9_data %>%
group_by(country) %>%
summarise(overall_cert_count = sum(get(paste0(product, "_cert")) == 1)) %>%
mutate(product= product) %>%
select(product, everything())
}
tab9 <- left_join(
# Number of products with each certification type
tab9_data %>%
select(country, all_of(vector_certifcols)) %>%
pivot_longer(
cols = all_of(vector_certifcols),
names_to = "certification_type",
values_to = "value"
) %>%
group_by(country, certification_type) %>%
summarise(cert_type_count = sum(!is.na(value) & value == 1, na.rm = TRUE), .groups = 'drop') %>%
mutate(
product = sub("_.*", "", certification_type),
certification_name = gsub("(?<=[a-zA-Z])\\.(?=[a-zA-Z])", " ", sub(".*_", "", certification_type), perl = TRUE)
) %>%
group_by(country, product) %>%
arrange(country, product, desc(cert_type_count)) %>%
slice(1:3) %>%
mutate(rank = row_number()) %>%
select(product, country, everything()),
# Apply the function to create a table with list of certification types and their number
tab9d_combined <- lapply(products, tab9_product_fn) %>%
bind_rows()
) %>%
# Combine and clean up variables
mutate(product = paste(product, rank),
perc = round((cert_type_count/overall_cert_count)*100, 2),
certification = ifelse(cert_type_count == 0, NA, paste0(certification_name, " (", cert_type_count, ", ", perc, "%)")),
cert = ifelse(cert_type_count == 0, NA, paste0(certification_name, "|", cert_type_count))
)
View(tab9)
tab9a <- left_join(
# Number of products with each certification type
tab9_data %>%
select(country, all_of(vector_certifcols)) %>%
pivot_longer(
cols = all_of(vector_certifcols),
names_to = "certification_type",
values_to = "value"
) %>%
group_by(country, certification_type) %>%
summarise(cert_type_count = sum(!is.na(value) & value == 1, na.rm = TRUE), .groups = 'drop') %>%
mutate(
product = sub("_.*", "", certification_type),
certification_name = gsub("(?<=[a-zA-Z])\\.(?=[a-zA-Z])", " ", sub(".*_", "", certification_type), perl = TRUE)
) %>%
group_by(country, product) %>%
arrange(country, product, desc(cert_type_count)) %>%
slice(1:3) %>%
mutate(rank = row_number()) %>%
select(product, country, everything()),
# Apply the function to create a table with list of certification types and their number
tab9d_combined <- lapply(products, tab9_product_fn) %>%
bind_rows()
) %>%
# Combine and clean up variables
mutate(product = paste(product, rank),
perc = round((cert_type_count/overall_cert_count)*100, 2),
certification = ifelse(cert_type_count == 0, NA, paste0(certification_name, " (", cert_type_count, ", ", perc, "%)"))) %>%
select(country, product, over_cert_count, certification_name, cert_type_count, perc) %>%
# Sort by product column alphabetically
arrange(product) %>%
# Reshape table to match the analysis plan
pivot_wider(names_from = country,
values_from = certification)
tab9 <- left_join(
# Number of products with each certification type
tab9_data %>%
select(country, all_of(vector_certifcols)) %>%
pivot_longer(
cols = all_of(vector_certifcols),
names_to = "certification_type",
values_to = "value"
) %>%
group_by(country, certification_type) %>%
summarise(cert_type_count = sum(!is.na(value) & value == 1, na.rm = TRUE), .groups = 'drop') %>%
mutate(
product = sub("_.*", "", certification_type),
certification_name = gsub("(?<=[a-zA-Z])\\.(?=[a-zA-Z])", " ", sub(".*_", "", certification_type), perl = TRUE)
) %>%
group_by(country, product) %>%
arrange(country, product, desc(cert_type_count)) %>%
slice(1:3) %>%
mutate(rank = row_number()) %>%
select(product, country, everything()),
# Apply the function to create a table with list of certification types and their number
tab9d_combined <- lapply(products, tab9_product_fn) %>%
bind_rows()
) %>%
# Combine and clean up variables
mutate(product = paste(product, rank),
perc = round((cert_type_count/overall_cert_count)*100, 2),
certification = ifelse(cert_type_count == 0, NA, paste0(certification_name, " (", cert_type_count, ", ", perc, "%)"))
) %>%
select(country, product, certification) %>%
# Sort by product column alphabetically
arrange(product) %>%
# Reshape table to match the analysis plan
pivot_wider(names_from = country,
values_from = certification)
tab9a <- left_join(
# Number of products with each certification type
tab9_data %>%
select(country, all_of(vector_certifcols)) %>%
pivot_longer(
cols = all_of(vector_certifcols),
names_to = "certification_type",
values_to = "value"
) %>%
group_by(country, certification_type) %>%
summarise(cert_type_count = sum(!is.na(value) & value == 1, na.rm = TRUE), .groups = 'drop') %>%
mutate(
product = sub("_.*", "", certification_type),
certification_name = gsub("(?<=[a-zA-Z])\\.(?=[a-zA-Z])", " ", sub(".*_", "", certification_type), perl = TRUE)
) %>%
group_by(country, product) %>%
arrange(country, product, desc(cert_type_count)) %>%
slice(1:3) %>%
mutate(rank = row_number()) %>%
select(product, country, everything()),
# Apply the function to create a table with list of certification types and their number
tab9d_combined <- lapply(products, tab9_product_fn) %>%
bind_rows()
) %>%
# Combine and clean up variables
mutate(product = paste(product, rank),
perc = round((cert_type_count/overall_cert_count)*100, 2),
certification = ifelse(cert_type_count == 0, NA, paste0(certification_name, " (", cert_type_count, ", ", perc, "%)"))) %>%
select(country, product, overall_cert_count, certification_name, cert_type_count, perc) %>%
# Sort by product column alphabetically
arrange(product) %>%
# Reshape table to match the analysis plan
pivot_wider(names_from = country,
values_from = certification)
tab9a <- left_join(
# Number of products with each certification type
tab9_data %>%
select(country, all_of(vector_certifcols)) %>%
pivot_longer(
cols = all_of(vector_certifcols),
names_to = "certification_type",
values_to = "value"
) %>%
group_by(country, certification_type) %>%
summarise(cert_type_count = sum(!is.na(value) & value == 1, na.rm = TRUE), .groups = 'drop') %>%
mutate(
product = sub("_.*", "", certification_type),
certification_name = gsub("(?<=[a-zA-Z])\\.(?=[a-zA-Z])", " ", sub(".*_", "", certification_type), perl = TRUE)
) %>%
group_by(country, product) %>%
arrange(country, product, desc(cert_type_count)) %>%
slice(1:3) %>%
mutate(rank = row_number()) %>%
select(product, country, everything()),
# Apply the function to create a table with list of certification types and their number
tab9d_combined <- lapply(products, tab9_product_fn) %>%
bind_rows()
) %>%
# Combine and clean up variables
mutate(product = paste(product, rank),
perc = round((cert_type_count/overall_cert_count)*100, 2),
certification = ifelse(cert_type_count == 0, NA, paste0(certification_name, " (", cert_type_count, ", ", perc, "%)"))) %>%
select(country, product, overall_cert_count, certification_name, cert_type_count, perc) %>%
# Sort by product column alphabetically
arrange(product)
View(tab9a)
tab9a <- left_join(
# Number of products with each certification type
tab9_data %>%
select(country, all_of(vector_certifcols)) %>%
pivot_longer(
cols = all_of(vector_certifcols),
names_to = "certification_type",
values_to = "value"
) %>%
group_by(country, certification_type) %>%
summarise(cert_type_count = sum(!is.na(value) & value == 1, na.rm = TRUE), .groups = 'drop') %>%
mutate(
product = sub("_.*", "", certification_type),
certification_name = gsub("(?<=[a-zA-Z])\\.(?=[a-zA-Z])", " ", sub(".*_", "", certification_type), perl = TRUE)
) %>%
group_by(country, product) %>%
arrange(country, product, desc(cert_type_count)) %>%
slice(1:3) %>%
mutate(rank = row_number()) %>%
select(product, country, everything()),
# Apply the function to create a table with list of certification types and their number
tab9d_combined <- lapply(products, tab9_product_fn) %>%
bind_rows()
) %>%
# Combine and clean up variables
mutate(product = paste(product, rank),
perc = round((cert_type_count/overall_cert_count)*100, 2),
certification = ifelse(cert_type_count == 0, NA, paste0(certification_name, " (", cert_type_count, ", ", perc, "%)"))) %>%
select(country, product, overall_cert_count, certification_name, cert_type_count, perc) %>%
# Sort by product column alphabetically
arrange(country, product)
addWorksheet(certifications, "Table 9A")
writeData(certifications, sheet = "Table 9A", x = tab9a)
saveWorkbook(certifications, "C:/Users/s1985751/Documents/GitHub/fea/certifications.xlsx", overwrite = TRUE)
# Import cleaned data
certification_clean <- read.xlsx("~/GitHub/fea/Outputs/certifications_clean.xlsx", sheet = "Certifications")
# Vector with certification types variables
vector_certifcols <- certification_clean %>%
select(contains("_org_certif")) %>%
select(-matches("_org_certif_None|_org_certif_other_1|_org_certif_other_2|_org_certif_other_3|_org_certif_other_4|_org_certif_other_5")) %>%
names()
# Vector of product abbreviations
products <- c("ban","chic","cof","wht","fj","leaf","daal","man","milk","mill","nut","rice","tea","tom")
# Define a function to summarise number of certification types
tab9_product_fn <- function(product) {
certification_clean %>%
group_by(country) %>%
summarise(overall_cert_count = sum(get(paste0(product, "_cert")) == 1)) %>%
mutate(product= product) %>%
select(product, everything())
}
tab9a <- left_join(
# Number of products with each certification type
certification_clean %>%
select(country, all_of(vector_certifcols)) %>%
pivot_longer(
cols = all_of(vector_certifcols),
names_to = "certification_type",
values_to = "value"
) %>%
group_by(country, certification_type) %>%
summarise(cert_type_count = sum(!is.na(value) & value == 1, na.rm = TRUE), .groups = 'drop') %>%
mutate(
product = sub("_.*", "", certification_type),
certification_name = gsub("(?<=[a-zA-Z])\\.(?=[a-zA-Z])", " ", sub(".*_", "", certification_type), perl = TRUE)
) %>%
group_by(country, product) %>%
arrange(country, product, desc(cert_type_count)) %>%
slice(1:3) %>%
mutate(rank = row_number()) %>%
select(product, country, everything()),
# Apply the function to create a table with list of certification types and their number
tab9d_combined <- lapply(products, tab9_product_fn) %>%
bind_rows()
) %>%
# Combine and clean up variables
mutate(product = paste(product, rank),
perc = round((cert_type_count/overall_cert_count)*100, 2),
certification = ifelse(cert_type_count == 0, NA, paste0(certification_name, " (", cert_type_count, ", ", perc, "%)"))) %>%
select(country, product, overall_cert_count, certification_name, cert_type_count, perc) %>%
# Sort by product column alphabetically
arrange(country, product)
View(certification_clean)
tab9b <- certification_clean %>%
select(country, all_of(vector_certifcols)) %>%
pivot_longer(
cols = all_of(vector_certifcols),
names_to = "certification_type",
values_to = "value"
) %>%
group_by(country, certification_type) %>%
summarise(cert_type_count = sum(!is.na(value) & value == 1, na.rm = TRUE), .groups = 'drop') %>%
mutate(
product = sub("_.*", "", certification_type),
certification_name = gsub("(?<=[a-zA-Z])\\.(?=[a-zA-Z])", " ", sub(".*_", "", certification_type), perl = TRUE)
) %>%
group_by(country, product) %>%
arrange(country, product, desc(cert_type_count)) %>%
#slice(1:3) %>%
mutate(rank = row_number()) %>%
select(product, country, everything())
View(tab9b)
tab9c <- lapply(products, tab9_product_fn) %>%
bind_rows()
View(data_clean)
vector_cert <- tab9_data2 %>%
select(contains("_cert"))
View(vector_cert)
vector_cert <- tab9_data2 %>%
select(contains("_cert")) %>%
select(-matches("certif"))
vector_cert <- tab9_data %>%
select(contains("_cert"))
View(vector_cert)
vector_cert <- tab9_data %>%
select(contains("_cert")) %>%
select(-matches("certif"))
certification_data <- left_join(
certification_clean %>%
select(id, country, everything()),
tab9_data %>%
select(id, country, vector_cert))
certification_data <- left_join(
certification_clean %>%
select(id, country, everything()),
tab9_data %>%
select(id, country, ban_cert, chic_cert, cof_cert, wht_cert, fj_cert, leaf_cert,
daal_cert, man_cert, milk_cert, mill_cert, nut_cert, rice_cert, tea_cert, tom_cert))
View(certification_data)
# Import cleaned data
tab9_cert_clean <- read.xlsx("~/GitHub/fea/Outputs/certifications_clean.xlsx", sheet = "Certifications")
# Join with certification count columns
tab9_cert_data <- left_join(
tab9_cert_clean %>%
select(id, country, everything()),
tab9_data %>%
select(id, country, ban_cert, chic_cert, cof_cert, wht_cert, fj_cert, leaf_cert,
daal_cert, man_cert, milk_cert, mill_cert, nut_cert, rice_cert, tea_cert, tom_cert))
View(tab9_cert_clean)
View(tab9_cert_data)
# Join with certification count columns
tab9_cert_data <- left_join(
tab9_cert_clean %>%
select(id, country, everything()),
tab9_data %>%
select(id, country, ban_cert, chic_cert, cof_cert, wht_cert, fj_cert, leaf_cert,
daal_cert, man_cert, milk_cert, mill_cert, nut_cert, rice_cert, tea_cert, tom_cert))
# Vector with certification types variables without other columns
vector_certifcols <- certification_clean %>%
select(contains("_org_certif")) %>%
select(-matches("_org_certif_None|_org_certif_other_1|_org_certif_other_2|_org_certif_other_3|_org_certif_other_4|_org_certif_other_5")) %>%
names()
# Vector of product abbreviations
products <- c("ban","chic","cof","wht","fj","leaf","daal","man","milk","mill","nut","rice","tea","tom")
# Define a function to summarise number of certification types
tab9_product_fn <- function(product) {
certification_clean %>%
group_by(country) %>%
summarise(overall_cert_count = sum(get(paste0(product, "_cert")) == 1)) %>%
mutate(product= product) %>%
select(product, everything())
}
# Create table without other options
tab9a <- left_join(
# Number of products with each certification type
certification_clean %>%
select(country, all_of(vector_certifcols)) %>%
pivot_longer(
cols = all_of(vector_certifcols),
names_to = "certification_type",
values_to = "value"
) %>%
group_by(country, certification_type) %>%
summarise(cert_type_count = sum(!is.na(value) & value == 1, na.rm = TRUE), .groups = 'drop') %>%
mutate(
product = sub("_.*", "", certification_type),
certification_name = gsub("(?<=[a-zA-Z])\\.(?=[a-zA-Z])", " ", sub(".*_", "", certification_type), perl = TRUE)
) %>%
group_by(country, product) %>%
arrange(country, product, desc(cert_type_count)) %>%
#slice(1:3) %>%
mutate(rank = row_number()) %>%
select(product, country, everything()),
# Apply the function to create a table with list of certification types and their number
tab9d_combined <- lapply(products, tab9_product_fn) %>%
bind_rows()
) %>%
# Combine and clean up variables
mutate(product = paste(product, rank),
perc = round((cert_type_count/overall_cert_count)*100, 2),
certification = ifelse(cert_type_count == 0, NA, paste0(certification_name, " (", cert_type_count, ", ", perc, "%)"))) %>%
select(country, product, overall_cert_count, certification_name, cert_type_count, perc) %>%
# Sort by product column alphabetically
arrange(country, product)
# Import cleaned data
tab9_cert_clean <- read.xlsx("~/GitHub/fea/Outputs/certifications_clean.xlsx", sheet = "Certifications")
# Join with certification count columns
tab9_cert_data <- left_join(
tab9_cert_clean %>%
select(id, country, everything()),
tab9_data %>%
select(id, country, ban_cert, chic_cert, cof_cert, wht_cert, fj_cert, leaf_cert,
daal_cert, man_cert, milk_cert, mill_cert, nut_cert, rice_cert, tea_cert, tom_cert))
# Vector with certification types variables without other columns
vector_certifcols <- tab9_cert_data %>%
select(contains("_org_certif")) %>%
select(-matches("_org_certif_None|_org_certif_other_1|_org_certif_other_2|_org_certif_other_3|_org_certif_other_4|_org_certif_other_5")) %>%
names()
# Vector of product abbreviations
products <- c("ban","chic","cof","wht","fj","leaf","daal","man","milk","mill","nut","rice","tea","tom")
# Define a function to summarise number of certification types
tab9_product_fn <- function(product) {
tab9_cert_data %>%
group_by(country) %>%
summarise(overall_cert_count = sum(get(paste0(product, "_cert")) == 1)) %>%
mutate(product= product) %>%
select(product, everything())
}
# Create table without other options
tab9a <- left_join(
# Number of products with each certification type
certification_clean %>%
select(country, all_of(vector_certifcols)) %>%
pivot_longer(
cols = all_of(vector_certifcols),
names_to = "certification_type",
values_to = "value"
) %>%
group_by(country, certification_type) %>%
summarise(cert_type_count = sum(!is.na(value) & value == 1, na.rm = TRUE), .groups = 'drop') %>%
mutate(
product = sub("_.*", "", certification_type),
certification_name = gsub("(?<=[a-zA-Z])\\.(?=[a-zA-Z])", " ", sub(".*_", "", certification_type), perl = TRUE)
) %>%
group_by(country, product) %>%
arrange(country, product, desc(cert_type_count)) %>%
#slice(1:3) %>%
mutate(rank = row_number()) %>%
select(product, country, everything()),
# Apply the function to create a table with list of certification types and their number
tab9a_combined <- lapply(products, tab9_product_fn) %>%
bind_rows()
) %>%
# Combine and clean up variables
mutate(product = paste(product, rank),
perc = round((cert_type_count/overall_cert_count)*100, 2),
certification = ifelse(cert_type_count == 0, NA, paste0(certification_name, " (", cert_type_count, ", ", perc, "%)"))) %>%
select(country, product, overall_cert_count, certification_name, cert_type_count, perc) %>%
# Sort by product column alphabetically
arrange(country, product)
View(tab9a)
# Create table without other options
tab9a <- left_join(
# Number of products with each certification type
certification_clean %>%
select(country, all_of(vector_certifcols)) %>%
pivot_longer(
cols = all_of(vector_certifcols),
names_to = "certification_type",
values_to = "value"
) %>%
group_by(country, certification_type) %>%
summarise(cert_type_count = sum(!is.na(value) & value == 1, na.rm = TRUE), .groups = 'drop') %>%
mutate(
product = sub("_.*", "", certification_type),
certification_name = gsub("(?<=[a-zA-Z])\\.(?=[a-zA-Z])", " ", sub(".*_", "", certification_type), perl = TRUE)
) %>%
group_by(country, product) %>%
arrange(country, product, desc(cert_type_count)) %>%
#slice(1:3) %>%
mutate(rank = row_number()) %>%
select(product, country, everything()),
# Apply the function to create a table with list of certification types and their number
tab9a_combined <- lapply(products, tab9_product_fn) %>%
bind_rows()
) %>%
# Combine and clean up variables
mutate(product = paste(product, rank)#,
#perc = round((cert_type_count/overall_cert_count)*100, 2),
#certification = ifelse(cert_type_count == 0, NA, paste0(certification_name, " (", cert_type_count, ", ", perc, "%)"))
) %>%
select(country, product, overall_cert_count, certification_name, cert_type_count) %>%
# Sort by product column alphabetically
arrange(country, product)
addWorksheet(certifications, "Table 9A")
writeData(certifications, sheet = "Table 9A", x = tab9a)
saveWorkbook(certifications, "C:/Users/s1985751/Documents/GitHub/fea/certifications.xlsx", overwrite = TRUE)
