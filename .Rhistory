mutate(id = paste0("q_",row_number())) %>%
select(id, everything())
# Fix date format
qdata1 <- qdata1 %>%
mutate(date_formatted = as.Date(date_formatted, format = "%d-%m-%Y"))
# Clean up responses with commas
qdata1$select_products <- gsub("Green leafy vegetables \\(spinach, otherwise closest available alternative\\)", "Leafy", qdata1$select_products)
qdata1$select_products <- gsub("Fruit juice \\(orange, otherwise closest available alternative\\)", "FJ", qdata1$select_products)
qdata1$select_products <- gsub("Daal / lentils \\(moorg, otherwise closest available alternative\\)", "Daal", qdata1$select_products)
qdata1$select_products <- gsub("Wheat flour \\(white, otherwise closest available alternative\\)", "Wheat", qdata1$select_products)
promo_type_rename <- c("tom_org_promo_type","leaf_org_promo_type","ban_org_promo_type","man_org_promo_type",
"fj_org_promo_type","milk_org_promo_type","cof_org_promo_type","tea_org_promo_type",
"mill_org_promo_type","chic_org_promo_type","daal_org_promo_type","wht_org_promo_type","rice_org_promo_type","nut_org_promo_type",
"app_org_promo_type","pot_org_promo_type","chkn_org_promo_type","egg_org_promo_type")
for (product_promo in promo_type_rename) {
qdata1[[product_promo]] <- gsub("Large promotional displays \\(e.g. hanging display, big stand with products on it\\)", "Large displays", qdata1[[product_promo]])
}
# Clean up certification options with Portuguese keyboard
certif_rename <- c("tom_org_certif","leaf_org_certif","ban_org_certif","man_org_certif",
"fj_org_certif","milk_org_certif","cof_org_certif","tea_org_certif",
"mill_org_certif","chic_org_certif","daal_org_certif","wht_org_certif","rice_org_certif","nut_org_certif",
"app_org_certif","pot_org_certif","chkn_org_certif","egg_org_certif")
for (certif in certif_rename) {
qdata1[[certif]] <- gsub("Produto OrgÃ¢nico Brasil", "Produto Organico Brasil", qdata1[[certif]])
}
certif_other_rename <- c("tom_org_certif_other","leaf_org_certif_other","ban_org_certif_other","man_org_certif_other",
"fj_org_certif_other","milk_org_certif_other","cof_org_certif_other","tea_org_certif_other",
"mill_org_certif_other","chic_org_certif_other","daal_org_certif_other","wht_org_certif_other","rice_org_certif_other","nut_org_certif_other",
"app_org_certif_other","pot_org_certif_other","chkn_org_certif_other","egg_org_certif_other")
for (certif_other in certif_other_rename) {
qdata1[[certif_other]] <- gsub("Produto OrgÃ¢nico Brasil", "Produto Organico Brasil", qdata1[[certif_other]])
qdata1[[certif_other]] <- gsub("Produtos OrgÃ¢nicos Brasil", "Produto Organico Brasil", qdata1[[certif_other]])
qdata1[[certif_other]] <- gsub("Produto OrgÃ¢nicos Brasil", "Produto Organico Brasil", qdata1[[certif_other]])
}
# Convert single to multiple columns
# Columns to split
concat_cols <- c("vendor_days","select_products",
"tom_org_terms","tom_org_certif","tom_org_pack_themes","tom_org_promo_type","tom_org_promo_themes",
"man_org_terms","man_org_certif","man_org_pack_themes","man_org_promo_type","man_org_promo_themes",
"leaf_org_terms","leaf_org_certif","leaf_org_pack_themes","leaf_org_promo_type","leaf_org_promo_themes",
"ban_org_terms","ban_org_certif","ban_org_pack_themes","ban_org_promo_type","ban_org_promo_themes",
"fj_org_terms","fj_org_certif","fj_org_pack_themes","fj_org_promo_type","fj_org_promo_themes",
"milk_org_terms","milk_org_certif","milk_org_pack_themes","milk_org_promo_type","milk_org_promo_themes",
"cof_org_terms","cof_org_certif","cof_org_pack_themes","cof_org_promo_type","cof_org_promo_themes",
"tea_org_terms","tea_org_certif","tea_org_pack_themes","tea_org_promo_type","tea_org_promo_themes",
"mill_org_terms","mill_org_certif","mill_org_pack_themes","mill_org_promo_type","mill_org_promo_themes",
"chic_org_terms","chic_org_certif","chic_org_pack_themes","chic_org_promo_type","chic_org_promo_themes",
"daal_org_terms","daal_org_certif","daal_org_pack_themes","daal_org_promo_type","daal_org_promo_themes",
"wht_org_terms","wht_org_certif","wht_org_pack_themes","wht_org_promo_type","wht_org_promo_themes",
"rice_org_terms","rice_org_certif","rice_org_pack_themes","rice_org_promo_type","rice_org_promo_themes",
"nut_org_terms","nut_org_certif","nut_org_pack_themes","nut_org_promo_type","nut_org_promo_themes",
"app_org_terms","app_org_certif","app_org_pack_themes","app_org_promo_type","app_org_promo_themes",
"pot_org_terms","pot_org_certif","pot_org_pack_themes","pot_org_promo_type","pot_org_promo_themes",
"chkn_org_terms","chkn_org_certif","chkn_org_pack_themes","chkn_org_promo_type","chkn_org_promo_themes",
"egg_org_terms","egg_org_certif","egg_org_pack_themes","egg_org_promo_type","egg_org_promo_themes")
# Loop through each variable
for (col in concat_cols) {
# Create separate columns
temp_data <- qdata1 %>%
select(id, col) %>%
separate(col = col, into = paste0(col, "_", 1:20), sep = ",", fill = "right")
# Convert to long format
temp_long <- temp_data %>%
pivot_longer(cols = starts_with(paste0(col,"_")),
values_to = "value",
values_drop_na = TRUE) %>%
select(-name)
# Create dummy variables
temp_dummy <- temp_long %>%
mutate(dummy=1) %>%
pivot_wider(names_from = value,
values_from = dummy,
values_fill = list(dummy=0),
names_prefix = paste0(col,"_")) %>%
mutate(across(-id, as.numeric))
# Join with original dataset
qdata1 <- left_join(qdata1, temp_dummy, by = "id", suffix = c("", ".temp"))
# Find the position of the original column
original_col_position <- which(names(qdata1) == col)
# Get the new columns added from temp_dummy, excluding 'id'
new_cols <- setdiff(names(temp_dummy), "id")
# Reorder the new columns next to the original column
qdata1 <- qdata1 %>%
select(all_of(names(qdata1)[1:original_col_position]),
all_of(new_cols),
all_of(names(qdata1)[(original_col_position + 1):length(names(qdata1))]))
}
qdata1 <- qdata1 %>% select(-all_of(concat_cols))
# Ensure all column names are valid R identifiers
#colnames(qdata1) <- make.names(colnames(qdata1), unique = TRUE)
# 3. PREPARE REDCAP DATASET----
# Read RedCap data and column mapping files
rdata <- read_excel("Inputs/RedCap_Labels_13.6.24.xlsx")
column_mapping_r <- read_excel("Inputs/column_mapping_redcap2.xlsx")
# Initialise RedCap data
rdata1 <- rdata
# Check no NA column names in column mapping
column_mapping_r <- column_mapping_r %>% filter(!is.na(new_name))
# Rename RedCap columns
colnames(rdata1) <- column_mapping_r$new_name
# Ensure all column names are valid R identifiers
#colnames(rdata1) <- make.names(colnames(rdata1), unique = TRUE)
# Check initial data types for qdata and rdata
#initial_qdata_types <- sapply(qdata, class)
#initial_rdata_types <- sapply(rdata, class)
# Combine the initial data types
#initial_data_types <- data.frame(
#  Variable = names(initial_qdata_types),
#  Initial_QData_Type = initial_qdata_types,
#  Initial_RData_Type = initial_rdata_types[names(initial_qdata_types)]
#)
# Identify columns that contain 'Checked' or 'Unchecked'
contains_checked_unchecked <- function(column) {
any(column %in% c("Checked", "Unchecked"))
}
# Convert 'Checked' and 'Unchecked' to binary (1/0) variables, excluding non-text columns like dates
rdata1 <- rdata1 %>%
mutate(across(where(~ contains_checked_unchecked(.)), ~ ifelse(. == "Checked", 1, ifelse(. == "Unchecked", 0, .))))
# Set column data type
for (i in seq_along(column_mapping_r$new_name)) {
column_r <- column_mapping_r$new_name[i]
data_type <- column_mapping_r$data_type[i]
if (!is.na(column_r) && column_r %in% colnames(rdata1)) {
if (data_type == "numeric") {
# Try to convert to numeric and log if NAs are introduced
new_col <- suppressWarnings(as.numeric(rdata1[[column_r]]))
if (any(is.na(new_col) & !is.na(rdata1[[column_r]]))) {
log_conversion_issue(column_r)
}
rdata1[[column_r]] <- new_col
} else if (data_type == "character" || data_type == "text") {
rdata1[[column_r]] <- as.character(rdata1[[column_r]])
} else if (data_type == "logical") {
rdata1[[column_r]] <- as.logical(rdata1[[column_r]])
}
}
}
# Set unique ID per row/response
rdata1 <- rdata1 %>%
mutate(id = paste0("r_", row_number())) %>%
select(id, everything())
# Delete irrelevant columns
columns_to_delete_redcap <- c("id_redcap","responseid","enddatetime")
rdata1 <- rdata1[, !names(rdata1) %in% columns_to_delete_redcap]
# Fix date format
rdata1 <- rdata1 %>%
mutate(date_formatted = as.Date(date_formatted, format = "%Y-%m-%d"))
# Rename Produto Organico column
#colnames(rdata1) <- gsub("Produto OrgÃ¢nico Brasil", "Produto Organico Brasil", colnames(rdata1))
# Get data types for each column in qdata1
#qdata1_types <- sapply(qdata1, class)
# Get data types for each column in rdata1
#rdata1_types <- sapply(rdata1, class)
# Combine the results into a data frame
#data_types <- data.frame(
#  Variable = names(qdata1_types),
#  QData1_Type = qdata1_types,
#  RData1_Type = rdata1_types[names(qdata1_types)]
#)
# 4. MERGE DATASETS----
combined_data <- bind_rows(rdata1, qdata1)
# 5. REMOVE INVALID RESPONSES----
# Delete where blank for lat, lon, vendor name, and vendor type
blank_responses <- rowSums(is.na(combined_data[,c("latitude","longitude","vendor_name","vendor_type")])) == 4
print(table(blank_responses))
blank_rows <- combined_data[blank_responses, ]
print(blank_rows)
combined_data <- combined_data[!blank_responses,]
# Delete where entire row is blank
combined_data <- combined_data %>%
filter(rowSums(is.na(.)) != ncol(.))
# Delete where vendor name is Testing
testing_responses <- combined_data$vendor_name == "Testing"
print(table(testing_responses))
testing_rows <- combined_data[testing_responses, ]
print(testing_rows)
combined_data <- combined_data[!testing_responses,]
# Check incomplete records - only relevant for RedCap data
print(table(combined_data$complete))
incomplete <- combined_data %>%
filter(complete == "Incomplete")
# Delete specific unique IDs based on manual checks, including above data frame of incomplete records
other_delete <- c("q_423", "r_93", "r_94", "r_155", "r_156", "r_160", "r_170", "r_180", "r_182", "r_201", "r_211", "r_226", "r_227", "r_249") # add in other IDs as necessary
combined_data <- combined_data %>%
filter(!id %in% other_delete)
# Delete columns for apples, potatoes, chicken, and eggs, as data only gathered for Brazil and London
# Create a vector of prefixes for products to delete
products_delete <- c("app_", "pot_", "chkn_", "egg_")
# Create a regular expression to match columns starting with these prefixes
pattern <- paste0("^(", paste(products_delete, collapse = "|"), ")")
# Use select to keep all columns that do not match the pattern
combined_data <- combined_data %>% select(-matches(pattern))
# Print records for which data collection could not proceed and then delete them
permission_denied <- combined_data %>%
filter(proceed == "No, vendor refuses to allow data collection to proceed")
vendor_closed <- combined_data %>%
filter(proceed == "No, vendor is closed")
combined_data <- combined_data %>%
filter(!proceed %in% c("No, vendor refuses to allow data collection to proceed",
"No, vendor is closed"))
# Delete records where the vendor is open zero days
vendor_days_vector <- c("vendor_days_Monday","vendor_days_Tuesday","vendor_days_Wednesday","vendor_days_Thursday",
"vendor_days_Friday","vendor_days_Saturday","vendor_days_Sunday")
combined_data <- combined_data %>%
mutate(vendor_days_count = rowSums(select(., all_of(vendor_days_vector)) == 1, na.rm = TRUE))
vendor_zero_days <- combined_data %>%
filter(vendor_days_count == 0) # Confirmed no records with zero days open
# Delete records where the vendor sells zero sentinel products
zero_products_vector <- c("tom_sell","leaf_sell","ban_sell","man_sell","fj_sell",
"milk_sell","cof_sell","tea_sell","mill_sell","daal_sell",
"wht_sell","rice_sell","nut_sell","chic_sell")
combined_data <- combined_data %>%
mutate(zero_products_count = rowSums(select(., all_of(zero_products_vector)) == "Yes", na.rm = TRUE))
vendor_zero_products <- combined_data %>%
filter(zero_products_count == 0) # 17 zero sentinel products
combined_data <- combined_data %>%
filter(zero_products_count != 0)
# 6. CLEAN UP OTHER RESPONSES----
# Clean up other vendor type responses
table(combined_data$vendor_type_other)
vendor_type_reclassify_small <- c("Bakery", "Bombonieri", "Butcher", "Butcher shop", "Casa de produtos naturais",
"Casa do Norte","Coffe shop", "Franquia de produtos naturais", "Greengrocer",
"Greengrocer franchise","Mercearia/bombonieri","Milk dairy","Quitanda", "Small vendor - eggs and chicken")
vendor_type_reclassify_mobile <- c("Raitu bajaru","Raitu Bazaru","Raitu Bazuru","Rythu Bazaar")
combined_data$vendor_type <- ifelse(combined_data$vendor_type == "Other (specify)" &
combined_data$vendor_type_other %in% vendor_type_reclassify_small,
"Stationary small local vendor",
combined_data$vendor_type)
combined_data$vendor_type <- ifelse(combined_data$vendor_type == "Other (specify)" &
combined_data$vendor_type_other %in% vendor_type_reclassify_mobile,
"Mobile vendor",
combined_data$vendor_type)
# Clean up other city responses
table(combined_data$city_other) # All Birmingham responses were listed as Cuiaba due to limitations with survey updating
combined_data$city <- gsub("Cuiaba", "Birmingham", combined_data$city) # Relabel Cuiaba to Birmingham
table(combined_data$city) # Confirmed all are relabelled
# Clean up other proceed responses
table(combined_data$proceed_other) # Initially was one other response - a testing row; doesn't exist anymore
#proceed_other_filter <- combined_data %>%
#  filter(proceed_other == "Testing") # Verified it was a test row
#combined_data <- combined_data %>%
#  filter(proceed_other != "Testing") # Delete row
#table(combined_data$proceed_other) # Validate that row has been deleted
# Clean up brand columns
# Create a vector of the short names for products
products_brand <- c("tom","leaf","ban","man","fj","milk","cof","tea","mill","chic",
"daal","wht","rice","nut")
# Run a loop through each product to create product specific columns
for (p_b in products_brand) {
brand_col <- paste0(p_b, "_org_brand")
other_col <- paste0(p_b, "_org_brand_other")
new_col <- paste0(p_b, "_org_brand_new")
# Run loop through each product to create new column with combined brand names
combined_data[[new_col]] <- ifelse(
combined_data[[brand_col]] == "Other (specify)",
combined_data[[other_col]],
combined_data[[brand_col]]
)
combined_data <- combined_data %>%
select(all_of(c(names(combined_data)[1:which(names(combined_data) == other_col)])),
all_of(new_col),
everything())
}
# Create a vector of all new brand columns
brand_new_cols <- c("tom_org_brand_new","leaf_org_brand_new","ban_org_brand_new","man_org_brand_new",
"fj_org_brand_new","milk_org_brand_new","cof_org_brand_new","tea_org_brand_new",
"mill_org_brand_new","chic_org_brand_new","daal_org_brand_new","wht_org_brand_new",
"rice_org_brand_new","nut_org_brand_new")
# Clean up Brazil responses where certifications were listed as brands
# Function to replace variations of Ecocerti/Brasil orgânico with NA
replace_ecocerti_with_na <- function(column) {
column <- case_when(
column %in% c("Ecocerti/Brasil orgânico", "Ecocerti/Orgânico Brasil", "Ecocerti/orgânico Brasil") ~ NA_character_,
TRUE ~ column
)
return(column)
}
# Apply the replacement function to relevant columns
combined_data <- combined_data %>%
mutate(across(all_of(brand_new_cols), replace_ecocerti_with_na))
# Function to replace IBD Brasil with NA
replace_ibd_with_na <- function(column) {
column <- ifelse(column == "IBD Brasil", NA, column)
return(column)
}
# Apply the replacement function to relevant columns
combined_data <- combined_data %>%
mutate(across(all_of(brand_new_cols), replace_ibd_with_na))
# Print a list of all unique brand names across all products
# Check which columns in brand_new_cols exist in combined_data
existing_cols <- brand_new_cols[brand_new_cols %in% names(combined_data)]
# Combine all responses into a long format for existing columns
all_responses <- combined_data %>%
select(all_of(existing_cols)) %>%
pivot_longer(cols = everything(), names_to = "column", values_to = "response") %>%
filter(!is.na(response)) %>%
distinct(response) %>%
arrange(response)
# Print all unique responses
print(all_responses$response)
# Rename duplicate or misspelled brand names, including selecting first response where multiple are provided
# List of gsub replacements to be made
replacements <- list(
"Rio Bonito; Bio vida." = "Rio Bonito", # select first brand
"Rio Bonito; Bio Vida" = "Rio Bonito", # select first brand
"Korin, Tio Joao, Camil" = "Korin", # select first brand
"Rio de Una; Bio Vida" = "Rio de Una", # select first brand
"MÃ£e terra, korin, Tio JoÃ£o, kamil." = "Mae Terra", # select first brand
"3 coraÃ§Ãµes" = "3 coracoes",
"Aashirvaada" = "Aashirvaad",
"Aashirvad" = "Aashirvaad",
"aashirvaad" = "Aashirvaad",
"B natural" = "B Natural",
"Balaji grand bazaar" = "Balaji Grand Bazaar",
"bio vida" = "Bio Vida",
"biovida" = "Bio Vida",
"Cafe direct" = "Cafe Direct",
"Café Direct" = "Cafe Direct",
"Campo verde" = "Chas Campo Verde",
"ChÃ¡s Campo Verde" = "Chas Campo Verde",
"Clipper (tea)" = "Clipper",
"Dalgety Strong Pure Tumeric" = "Dalgety",
"Doveâ€™s Farm" = "Dove's Farm",
"Dove's farm" = "Dove's Farm",
"Dover" = "Dove's Farm",
"Doves farm" = "Dove's Farm",
"Doves Farm" = "Dove's Farm",
"Doves" = "Dove's Farm",
"Fazenda da Toca OrgÃ¢nicos" = "Fazenda da Toca Organicos",
"Gâ€™s Naturally Fresh" = "G's",
"Gâ€™s" = "G's",
"Gailâ€™s" = "Gails",
#"Grahams (milk)" = "Grahams",
#"Graham's" = "Grahams",
#"Haldiram" = "Haldirams",
#"Haldiram a" = "Haldirams",
"Infinity food" = "Infinity Foods",
"Infinity foods" = "Infinity Foods",
"KÃ³rin" = "Korin",
"Lipton green tea" = "Lipton",
"Lipton - Tulsi Natura" = "Lipton",
"Mae terra" = "Mae Terra",
"Manna health mix" = "Manna",
"Mitra organics" = "Mitra Organics",
"Mokhtar Tea London" = "Mokhtar Tea",
"Mr Organic" = "Mr. Organic",
"MÃ£e terra" = "Mae Terra",
"Mãe terra" = "Mae Terra",
"NATURAL MILK" = "Natural",
"NATURAL" = "Natural",
"natural" = "Natural",
"Natural milk" = "Natural",
"Native produtos da natureza; Orfeu cafÃ©s especiais" = "Native",
"Native;" = "Native",
"Native; Poder da Terra" = "Native",
"NaÃ§Ã£o Verde" = "Nacao Verde",
"Organic tattva" = "Organic Tattva",
"OrgÃ¢nicos Solo Vivo" = "Organicos Solo Vivo",
"Pip Organic" = "Pip",
"Pronature" = "Pro Nature",
"Pure o natural" = "Pure O Natural",
"Red label" = "Red Label - Natural Care",
"Red label natural care" = "Red Label - Natural Care",
"Rio de una" = "Rio de Una",
"Rio de Una OrgÃ¢nicos" = "Rio de Una",
"Sainsburyâ€™s" = "Sainsbury's",
"Tetly" = "Tetley",
"TimbaÃºba" = "Timbauba",
"Tio JoÃ£o" = "Tio Joao",
"Tio joÃ£o" = "Tio Joao",
"Yeo Valley Organic" = "Yeo Valley",
"Yep Valley Organic" = "Yeo Valley",
"Yogi tea" = "Yogi Tea",
"Yeo Valley Organic" = "Yeo Valley"
)
# Sort replacements by length of pattern in descending order
sorted_replacements <- replacements[order(-nchar(names(replacements)))]
# Loop over each brand column
for (brand_name in brand_new_cols) {
if (brand_name %in% colnames(combined_data)) {
for (pattern in names(replacements)) {
combined_data[[brand_name]] <- gsub(pattern, replacements[[pattern]], combined_data[[brand_name]])
combined_data[[brand_name]][grepl("Hald", combined_data[[brand_name]])] <- "Haldirams"
combined_data[[brand_name]][grepl("Graham", combined_data[[brand_name]])] <-"Grahams"
combined_data[[brand_name]][grepl("Clipp", combined_data[[brand_name]])] <-"Clipper"
combined_data[[brand_name]][grepl("Pure o", combined_data[[brand_name]])] <-"Pure O Natural"
}
}
}
# Print another list of all brand names to confirm change
# Check which columns in brand_new_cols exist in combined_data
existing_cols2 <- brand_new_cols[brand_new_cols %in% names(combined_data)]
# Combine all responses into a long format for existing columns
all_responses2 <- combined_data %>%
select(all_of(existing_cols2)) %>%
pivot_longer(cols = everything(), names_to = "column", values_to = "response") %>%
filter(!is.na(response)) %>%
distinct(response) %>%
arrange(response)
# Clean up organic certification columns
# Clean up names of other organic certifications
# Print list of other certifications
# Create vector of other certifications
certif_other_cols <- c("tom_org_certif_other","leaf_org_certif_other","ban_org_certif_other","man_org_certif_other",
"fj_org_certif_other","milk_org_certif_other","cof_org_certif_other","tea_org_certif_other",
"mill_org_certif_other","chic_org_certif_other","daal_org_certif_other","wht_org_certif_other",
"rice_org_certif_other","nut_org_certif_other")
# Check which columns in certif_other_cols exist in combined_data
existing_certif_cols <- certif_other_cols[certif_other_cols %in% names(combined_data)]
# Combine all responses into a long format for existing columns
all_responses_cert <- combined_data %>%
select(all_of(existing_certif_cols)) %>%
pivot_longer(cols = everything(), names_to = "column", values_to = "response") %>%
filter(!is.na(response)) %>%
distinct(response) %>%
arrange(response)
# Print all unique responses
print(all_responses_cert$response)
# Rename duplicate or misspelled certifications; irrelevant ones renamed to 'delete'
# List of gsub replacements to be made
replacements_cert <- list(
"ADITI" = "delete", # Certification agency not certification type
"Araku" = "delete", # Brand name not certification
"B-corp" = "B-Corp",
"BR-Bio 122 Brazil Agriculture" = "delete", # Registration details not certification
"Bio" = "delete", # Checked and not a real certification, just a marketing logo
"buy social" = "Buy Social",
"CERES Certified" = "delete", # Certification agency not certification type
"CSA" = "delete", # Certification agency not certification type
"certified b" = "B-Corp",
"Donâ€™t know not available" = "delete",
"Eco Ceri; 100% organic"  = "Ecocert",
"Eco Cert; 100% organic" = "Ecocert",
"Eco cert; 100% organic" = "Ecocert",
"Eco Ceri" = "Ecocert",
"Eco Cert" = "Ecocert",
"Eco cert" = "Ecocert",
"Eco cert" = "Ecocert",
"Eco cert; eurecicle" = "Ecocert; Eureciclo",
"eurecicle" = "Eureciclo",
"EuReciclo" = "Eureciclo",
"Eu reciclo" = "Eureciclo",
"Fair for life" = "Fair for Life",
"Fair Wild, Fair for Life, B-corp" = "Fair Wild, Fair for Life, B-Corp",
"Fair for life, certified b, 1% for the planet" = "Fair for Life, B-Corp, 1%",
"Fair for life; certified B; 1% for the planet;" = "Fair for Life, B-Corp, 1%",
"Fair trade" = "Fairtrade",
"Fair trade, certified b, buy social" = "Fairtrade, B-Corp", # Buy Social is not a certification
"Fairtrade, B-corp" = "Fairtrade, B-Corp",
"Fssai" = "delete", # Food safety approval not certification
"Girjan" = "delete", # Brand not certification
"Greenfield organics" = "delete", # Brand not certification
"Indocert" = "delete", # Certification agency not certification type
"Irish organic association" = "delete", # Certification agency not certification type
"KP; Eu reciclo; Ecocert, BSCA; Rainforest alliance;" = "Ecocert; Eureciclo; Rainforest Alliance",
"Lacon quality certification" = "delete", # Certification agency not certification type
"Local certification (see photo)" = "delete",
"Mitra organics" = "delete", # Brand not certification
"Rainforest alliance" = "Rainforest Alliance",
"N SAI" = "delete", # Seed association not certification
"N sai" = "delete", # Seed association not certification
"NSAI" = "delete", # Seed association not certification
"Natura" = "delete", # Brand not certification
"Natural" = "delete", # Brand not certification
"No artificial colours, no added preservatives" = "delete", # Not certification
"One Cert" = "delete", # Certification agency not certification type
"Please, double-check details with my previous entry of the same product from Sainsbury." = "delete",
"Red tractor" = "Red Tractor",
"Red tractor; live better - source of protein" = "delete",
"Sopa" = "SOPA",
"Sri sai proteen Malt" = "delete", # Not a certification
"SS Natural Health care product" = "delete", # Not a certification
"Vegan; plant-based plastic free packaging" = "delete", # Not a certification
"Zero - pesticide free food" = "delete", # Not a certification
"Zero" = "delete" # Not a certification
)
# Sort replacements by length of pattern in descending order
sorted_replacements <- replacements_cert[order(-nchar(names(replacements_cert)))]
# Loop over each certification column
for (certification in certif_other_cols) {
if (certification %in% colnames(combined_data)) {
for (pattern in names(replacements_cert)) {
# Use word boundaries for precise matching
combined_data[[certification]] <- gsub(
paste0("\\b", pattern, "\\b"),
replacements_cert[[pattern]],
combined_data[[certification]],
ignore.case = TRUE
)
}
}
}
#  # Loop over each certification column
#  for (certification in certif_other_cols) {
#    if (certification %in% colnames(combined_data)) {
#      for (pattern in names(replacements_cert)) {
#        combined_data[[certification]] <- gsub(pattern, replacements_cert[[pattern]], combined_data[[certification]])
#      }
#    }
#  }
# Print another list of all certification names to confirm change
# Check which columns in existing_certif_cols exist in combined_data
existing_certif_cols2 <- certif_other_cols[certif_other_cols %in% names(combined_data)]
# Combine all responses into a long format for existing columns
all_responses_cert2 <- combined_data %>%
select(all_of(existing_certif_cols2)) %>%
pivot_longer(cols = everything(), names_to = "column", values_to = "response") %>%
filter(!is.na(response)) %>%
distinct(response) %>%
arrange(response)
# Print all unique responses
print(all_responses_cert2$response)
