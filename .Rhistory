tm_shape(vendors_sf_2) +
tm_dots(col = "red", size = 0.1)
# Join points to circles if within a circle
vendors_within_circles_2 <- st_join(vendors_sf_2, circles_sf_2, join = st_within)
# Identify points outside the circles
vendors_outside_circles_2 <- vendors_sf_2[is.na(vendors_within_circles_2$circle), ]
# Print vendors outside circles
print(vendors_outside_circles_2) # zero observations
# Map points by circle assignment
tm_shape(circles_sf_2) +
tm_polygons(col = "white", alpha = 0.5) +
tm_shape(vendors_within_circles_2) +
tm_dots(col = "circle", size = 0.1)
# Extract relevant columns from sf object to data frame
vendors_circle_details <- data.frame(
id = vendors_within_circles_2$id,
circle = vendors_within_circles_2$circle,
country = vendors_within_circles_2$country
)
# Join circle column to combined_data based on id
combined_data <- merge(combined_data, vendors_circle_details, by = "id", all.x = TRUE)
# Reorder to put circle after city
combined_data <- combined_data %>%
select(id:enumerator_other, country, city, city_other, circle, everything())
# 11. REVIEW RICE PRICE DATA----
# Create new data frame for responses with rice data
rice_prices_data <- combined_data %>%
filter(!is.na(rice_price_conv) | !is.na(rice_price_org))
# Remove irrelevant columns
rice_columns_keep <- c("id","date_formatted","country","city","circle","vendor_name","vendor_type",
"rice_price_conv","rice_price_conv_unit","rice_prive_conv_unit_other","rice_price_conv_displ",
"rice_price_org","rice_price_org_unit","rice_price_org_unit_other","rice_price_org_displ")
rice_prices_data <- rice_prices_data %>%
select(all_of(rice_columns_keep))
# Check unique price values for conventional and organic rice
print(unique(rice_prices_data$rice_price_conv))
print(unique(rice_prices_data$rice_price_org))
# Clean up N/A entries and use of currencies
rice_prices_data <- rice_prices_data %>%
mutate(rice_price_conv = ifelse(rice_price_conv %in% c('N/A', 'Na', 'NA', 'n/a'), NA, rice_price_conv), # removes NA entries
rice_price_conv = gsub(" reais", "", rice_price_conv), # changes entries with reias suffix
rice_price_conv = gsub("R\\$", "", rice_price_conv), # changes entries with R prefix
rice_price_conv = gsub("89P", "0.89", rice_price_conv), # changes entries with a P
rice_price_conv = gsub(",", ".", rice_price_conv), # changes , to .
rice_price_conv = gsub("55-60", "57.5", rice_price_conv), # average out range
rice_price_conv = gsub("60-75", "67.5", rice_price_conv), # average out range
rice_price_conv = gsub("60-70", "65", rice_price_conv), # average out range
rice_price_conv = gsub("30-50", "40", rice_price_conv), # average out range
rice_price_conv = gsub("50-70", "60", rice_price_conv), # average out range
rice_price_conv = gsub("50-65", "57.5", rice_price_conv), # average out range
rice_price_conv = gsub("21.99/20kg", "1.10", rice_price_conv), # 21.99/20kg converted to per kg - check with all prices marked other later
rice_price_conv = as.numeric(rice_price_conv) # Convert to numeric
)
print(unique(rice_prices_data$rice_price_conv)) # confirmed all fixed
rice_prices_data <- rice_prices_data %>%
mutate(rice_price_org = ifelse(rice_price_org %in% c('N/A', 'Na', 'NA'), NA, rice_price_org),
rice_price_org = gsub("R\\$", "", rice_price_org), # changes entries with R prefix
rice_price_org = gsub(",", ".", rice_price_org), # changes , to .
rice_price_org = as.numeric(rice_price_org) # Convert to numeric
)
print(unique(rice_prices_data$rice_price_org))   # confirmed all fixed
# Convert prices to per kg
# Create new column for conventional rice price per kg
rice_prices_data <- rice_prices_data %>%
mutate(rice_price_conv_kg = case_when(
rice_price_conv_unit %in% c("Per kilogram", "1kg bag") ~ rice_price_conv,
rice_price_conv_unit == "5kg bag" ~ rice_price_conv / 5,
rice_price_conv_unit == "10kg bag" ~ rice_price_conv / 10,
rice_price_conv_unit == "25kg bag" ~ rice_price_conv / 25,
rice_price_conv_unit == "500g bag" ~ rice_price_conv * 2,
rice_price_conv_unit == "Other (specify)" & rice_prive_conv_unit_other == "100g" ~ rice_price_conv * (1000/100),
rice_price_conv_unit == "Other (specify)" & rice_prive_conv_unit_other == "250g" ~ rice_price_conv * (1000/250),
rice_price_conv_unit == "Other (specify)" & rice_prive_conv_unit_other == "260g" ~ rice_price_conv * (1000/260),
rice_price_conv_unit == "Other (specify)" & rice_prive_conv_unit_other == "400g" ~ rice_price_conv * (1000/400),
rice_price_conv_unit == "Other (specify)" & rice_prive_conv_unit_other == "900g" ~ rice_price_conv * (1000/900),
rice_price_conv_unit == "Other (specify)" & rice_prive_conv_unit_other == "2kg" ~ rice_price_conv / 2,
rice_price_conv_unit == "Other (specify)" & rice_prive_conv_unit_other == "N/A" ~ rice_price_conv,
TRUE ~ NA_real_  # Default case if none of the above conditions are met
))
# Reorder to place after conventional price columns
rice_prices_data <- rice_prices_data %>%
select(id:rice_price_conv_displ, rice_price_conv_kg, everything())
# Create new column for organic rice price per kg
rice_prices_data <- rice_prices_data %>%
mutate(rice_price_org_kg = case_when(
rice_price_org_unit %in% c("Per kilogram", "1kg bag") ~ rice_price_org,
rice_price_org_unit == "5kg bag" ~ rice_price_org / 5,
rice_price_org_unit == "10kg bag" ~ rice_price_org / 10,
rice_price_org_unit == "25kg bag" ~ rice_price_org / 25,
rice_price_org_unit == "500g bag" ~ rice_price_org * 2,
rice_price_org_unit == "Other (specify)" & rice_price_org_unit_other == "250" ~ rice_price_org * (1000/250),
rice_price_org_unit == "Other (specify)" & rice_price_org_unit_other == "9kg" ~ rice_price_org / 9,
rice_price_org_unit == "Other (specify)" & rice_price_org_unit_other == "N/A" ~ rice_price_org,
TRUE ~ NA_real_  # Default case if none of the above conditions are met
))
# Reorder to place after organic price columns
rice_prices_data <- rice_prices_data %>%
select(id:rice_price_org_displ, rice_price_org_kg, everything())
# Convert to USD
# Import World Bank Official Exchange Rate dataset
exchange_rates <- read_excel("Inputs/exchange_rates.xlsx")
# Ensure the date_formatted column is in the same format as the date column in exchange_rates - i.e. first of the month
rice_prices_data <- rice_prices_data %>%
mutate(date_formatted = floor_date(date_formatted, "month"))
# Merge rice_prices_data with exchange_rates
merged_rice_data <- rice_prices_data %>%
left_join(exchange_rates, by = c("date_formatted" = "date"))
# Create rice_price_conv_unit_kg_usd column
rice_prices_data <- merged_rice_data %>%
mutate(rice_price_conv_kg_usd = case_when(
country == "India" ~ rice_price_conv_kg / IND,
country == "UK" ~ rice_price_conv_kg / GBR,
country == "Brazil" ~ rice_price_conv_kg / BRA,
TRUE ~ NA_real_
))
# Create rice_price_org_unit_kg_usd column
rice_prices_data <- rice_prices_data %>%
mutate(rice_price_org_kg_usd = case_when(
country == "India" ~ rice_price_org_kg / IND,
country == "UK" ~ rice_price_org_kg / GBR,
country == "Brazil" ~ rice_price_org_kg / BRA,
TRUE ~ NA_real_
))
# Check if any prices are greater than 2 standard deviations from the mean
# Calculate mean and standard deviation of rice_price_conv_kg_usd
stats <- rice_prices_data %>%
summarize(
mean_price = mean(rice_price_conv_kg_usd, na.rm = TRUE),
sd_price = sd(rice_price_conv_kg_usd, na.rm = TRUE)
)
# Calculate threshold for 2 standard deviations above the mean
threshold <- stats$mean_price + 2 * stats$sd_price
# Identify prices greater than 2 standard deviations from the mean
outliers_conv <- rice_prices_data %>%
filter(rice_price_conv_kg_usd > threshold)
# There are 23 outliers, all in the UK, mostly in London, probably because prices can be so extreme there.
# Would make more sense to test within a given city/country.
# Calculate mean and standard deviation of rice_price_org_kg_usd
stats <- rice_prices_data %>%
summarize(
mean_price = mean(rice_price_org_kg_usd, na.rm = TRUE),
sd_price = sd(rice_price_org_kg_usd, na.rm = TRUE)
)
# Calculate threshold for 2 standard deviations above the mean
threshold <- stats$mean_price + 2 * stats$sd_price
# Identify prices greater than 2 standard deviations from the mean
outliers_org <- rice_prices_data %>%
filter(rice_price_org_kg_usd > threshold)
# There are 4 outliers, again all in the UK, mostly in London
# 12. PREPARE COMPOSITE VARIABLES FOR ANALYSIS----
# Create rice_price_both variable for when a vendor has both organic and conventional rice
rice_prices_data <- rice_prices_data %>%
mutate(rice_price_both = ifelse(!is.na(rice_price_conv_kg_usd) & !is.na(rice_price_org_kg_usd), 1, 0))
# Create org_products_count variable to count how many sentinel products a vendor sells an organic version of
org_products_vector <- c("tom_org", "leaf_org", "ban_org", "man_org",
"fj_org", "milk_org", "cof_org", "tea_org",
"mill_org", "chic_org", "daal_org", "wht_org",
"rice_org", "nut_org")
combined_data <- combined_data %>%
mutate(org_products_count = rowSums(select(., all_of(org_products_vector)) == "Yes", na.rm = TRUE))
# Create org_vendor binary variable for if vendors sell at least one organic sentinel food
combined_data <- combined_data %>%
mutate(org_vendor = case_when(
org_products_count >= 1 ~ 1, # Assign 1 if count is greater than or equal to 1
TRUE ~ 0 # Assign 0 otherwise
))
# Mutate org_products_count to remove non-organic vendors
combined_data$org_products_count[combined_data$org_vendor == 0] <- NA
# Create org_foodonly_count variable to count how many sentinel foods a vendor sells an organic version of
org_foodonly_vector <- c("tom_org", "leaf_org", "ban_org", "man_org",
"mill_org", "chic_org", "daal_org", "wht_org",
"rice_org", "nut_org")
combined_data <- combined_data %>%
mutate(org_foodonly_count = rowSums(select(., all_of(org_foodonly_vector)) == "Yes", na.rm = TRUE))
# Create org_vendor_foodonly binary variable for if vendors sell at least one organic sentinel food
combined_data <- combined_data %>%
mutate(org_vendor_foodonly = case_when(
org_foodonly_count >= 1 ~ 1, # Assign 1 if count is greater than or equal to 1
TRUE ~ 0 # Assign 0 otherwise
))
# Mutate org_products_count to remove non-organic vendors
combined_data$org_foodonly_count[combined_data$org_vendor_foodonly == 0] <- NA
# Create multiple_org_count variable to count per vendor the number of organic sentinel foods with multiple options
multiple_org_vector <- c("tom_org_options", "leaf_org_options", "ban_org_options", "man_org_options",
"fj_org_options", "milk_org_options", "cof_org_options", "tea_org_options",
"mill_org_options", "chic_org_options", "daal_org_options", "wht_org_options",
"rice_org_options", "nut_org_options")
combined_data <- combined_data %>%
mutate(multiple_org_count = rowSums(select(., all_of(multiple_org_vector)) == "Yes", na.rm = TRUE))
# Create multiple_org_binary variable for if vendors sell at least one organic sentinel food with multiple options
combined_data <- combined_data %>%
mutate(multiple_org_binary = case_when(
(org_vendor == 1 & multiple_org_count >= 1) ~ 1, # Assign 1 if the vendor sells organic and the count is greater than or equal to 1
TRUE ~ 0 # Assign 0 otherwise
))
# Create days_open_count variable to count number of days vendors are open
days_vector <- c("vendor_days_Monday","vendor_days_Tuesday","vendor_days_Wednesday","vendor_days_Thursday",
"vendor_days_Friday","vendor_days_Saturday","vendor_days_Sunday")
combined_data <- combined_data %>%
mutate(days_open_count = rowSums(select(., all_of(days_vector)) == 1, na.rm = TRUE))
# Create days_open_category variable to break day count into categories
combined_data <- combined_data %>%
mutate(days_open_category = cut(days_open_count,
breaks = c(0,3,5,7),
labels = c("1-3", "4-5", "6-7"),
right = TRUE))
# Create org_discount_count variable to count organic sentinel foods with a discount
org_discount_vector <- c("tom_org_discount", "leaf_org_discount", "ban_org_discount", "man_org_discount",
"fj_org_discount", "milk_org_discount", "cof_org_discount", "tea_org_discount",
"mill_org_discount", "chic_org_discount", "daal_org_discount", "wht_org_discount",
"rice_org_discount", "nut_org_discount")
combined_data <- combined_data %>%
mutate(org_discount_count = rowSums(select(., all_of(org_discount_vector)) == "Yes", na.rm = TRUE))
# Create org_discount_binary variable for if vendors sell at least one organic sentinel food with a discount
combined_data <- combined_data %>%
mutate(org_discount_binary = case_when(
org_discount_count >= 1 ~ 1, # Assign 1 if count is greater than or equal to 1
TRUE ~ 0 # Assign 0 otherwise
))
# Create vendor_term_organic_count variable to count foods with term organic
terms_organic_vector <- c("tom_org_terms_Organic", "leaf_org_terms_Organic", "ban_org_terms_Organic", "man_org_terms_Organic",
"fj_org_terms_Organic", "milk_org_terms_Organic", "cof_org_terms_Organic", "tea_org_terms_Organic",
"mill_org_terms_Organic", "chic_org_terms_Organic", "daal_org_terms_Organic", "wht_org_terms_Organic",
"rice_org_terms_Organic", "nut_org_terms_Organic")
combined_data <- combined_data %>%
mutate(vendor_term_organic_count = rowSums(select(., all_of(terms_organic_vector)) == 1, na.rm = TRUE))
# Create vendor_term_natural_count variable to count foods with term natural
terms_natural_vector <- c("tom_org_terms_Natural", "leaf_org_terms_Natural", "ban_org_terms_Natural", "man_org_terms_Natural",
"fj_org_terms_Natural", "milk_org_terms_Natural", "cof_org_terms_Natural", "tea_org_terms_Natural",
"mill_org_terms_Natural", "chic_org_terms_Natural", "daal_org_terms_Natural", "wht_org_terms_Natural",
"rice_org_terms_Natural", "nut_org_terms_Natural")
combined_data <- combined_data %>%
mutate(vendor_term_natural_count = rowSums(select(., all_of(terms_natural_vector)) == 1, na.rm = TRUE))
# Create vendor_term_chemfree_count variable to count foods with term chemical-free
terms_chemfree_vector <- c("tom_org_terms_Chemical-free", "leaf_org_terms_Chemical-free", "ban_org_terms_Chemical-free", "man_org_terms_Chemical-free",
"fj_org_terms_Chemical-free", "milk_org_terms_Chemical-free", "cof_org_terms_Chemical-free", "tea_org_terms_Chemical-free",
"mill_org_terms_Chemical-free", "chic_org_terms_Chemical-free", "daal_org_terms_Chemical-free", "wht_org_terms_Chemical-free",
"rice_org_terms_Chemical-free", "nut_org_terms_Chemical-free")
combined_data <- combined_data %>%
mutate(vendor_term_chemfree_count = rowSums(select(., all_of(terms_chemfree_vector)) == 1, na.rm = TRUE))
# Create vendor_term_pestfree_count variable to count foods with term pesticide-free
terms_pestfree_vector <- c("tom_org_terms_Pesticide-free", "leaf_org_terms_Pesticide-free", "ban_org_terms_Pesticide-free", "man_org_terms_Pesticide-free",
"fj_org_terms_Pesticide-free", "milk_org_terms_Pesticide-free", "cof_org_terms_Pesticide-free", "tea_org_terms_Pesticide-free",
"mill_org_terms_Pesticide-free", "chic_org_terms_Pesticide-free", "daal_org_terms_Pesticide-free", "wht_org_terms_Pesticide-free",
"rice_org_terms_Pesticide-free", "nut_org_terms_Pesticide-free")
combined_data <- combined_data %>%
mutate(vendor_term_pestfree_count = rowSums(select(., all_of(terms_pestfree_vector)) == 1, na.rm = TRUE))
# Create vendor_term_bioprod_count variable to count foods with term bioproducts
terms_bioprod_vector <- c("tom_org_terms_Bioproducts", "leaf_org_terms_Bioproducts", "ban_org_terms_Bioproducts", "man_org_terms_Bioproducts",
"fj_org_terms_Bioproducts", "milk_org_terms_Bioproducts", "cof_org_terms_Bioproducts", "tea_org_terms_Bioproducts",
"mill_org_terms_Bioproducts", "chic_org_terms_Bioproducts", "daal_org_terms_Bioproducts", "wht_org_terms_Bioproducts",
"rice_org_terms_Bioproducts", "nut_org_terms_Bioproducts")
combined_data <- combined_data %>%
mutate(vendor_term_bioprod_count = rowSums(select(., all_of(terms_bioprod_vector)) == 1, na.rm = TRUE))
# Create vendor_term_bio_count variable to count foods with term bio
terms_bio_vector <- c("tom_org_terms_Bio", "leaf_org_terms_Bio", "ban_org_terms_Bio", "man_org_terms_Bio",
"fj_org_terms_Bio", "milk_org_terms_Bio", "cof_org_terms_Bio", "tea_org_terms_Bio",
"mill_org_terms_Bio", "chic_org_terms_Bio", "daal_org_terms_Bio", "wht_org_terms_Bio",
"rice_org_terms_Bio", "nut_org_terms_Bio")
combined_data <- combined_data %>%
mutate(vendor_term_bio_count = rowSums(select(., all_of(terms_bio_vector)) == 1, na.rm = TRUE))
# Create vendor_term_eco_count variable to count foods with term eco
terms_eco_vector <- c("tom_org_terms_Eco", "leaf_org_terms_Eco", "ban_org_terms_Eco", "man_org_terms_Eco",
"fj_org_terms_Eco", "milk_org_terms_Eco", "cof_org_terms_Eco", "tea_org_terms_Eco",
"mill_org_terms_Eco", "chic_org_terms_Eco", "daal_org_terms_Eco", "wht_org_terms_Eco",
"rice_org_terms_Eco", "nut_org_terms_Eco")
combined_data <- combined_data %>%
mutate(vendor_term_eco_count = rowSums(select(., all_of(terms_eco_vector)) == 1, na.rm = TRUE))
# Create vendor_term_gmo_count variable to count foods with term GMO-free
terms_gmo_vector <- c("tom_org_terms_GMO-free", "leaf_org_terms_GMO-free", "ban_org_terms_GMO-free", "man_org_terms_GMO-free",
"fj_org_terms_GMO-free", "milk_org_terms_GMO-free", "cof_org_terms_GMO-free", "tea_org_terms_GMO-free",
"mill_org_terms_GMO-free", "chic_org_terms_GMO-free", "daal_org_terms_GMO-free", "wht_org_terms_GMO-free",
"rice_org_terms_GMO-free", "nut_org_terms_GMO-free")
combined_data <- combined_data %>%
mutate(vendor_term_gmo_count = rowSums(select(., all_of(terms_gmo_vector)) == 1, na.rm = TRUE))
# Create vendor_term_dontknow_count variable to count foods with unclear terminology
terms_dontknow_vector <- c("tom_org_terms_Don't know", "leaf_org_terms_Don't know", "ban_org_terms_Don't know", "man_org_terms_Don't know",
"fj_org_terms_Don't know", "milk_org_terms_Don't know", "cof_org_terms_Don't know", "tea_org_terms_Don't know",
"mill_org_terms_Don't know", "chic_org_terms_Don't know", "daal_org_terms_Don't know", "wht_org_terms_Don't know",
"rice_org_terms_Don't know", "nut_org_terms_Don't know")
combined_data <- combined_data %>%
mutate(vendor_term_dontknow_count = rowSums(select(., all_of(terms_dontknow_vector)) == 1, na.rm = TRUE))
# Create a variable per product based on whether the organic product is certified
# Note that while I could code as anything that isn't the 'None' option, there is a risk of missing things due to data entry error
tom_cert_vector <- c("tom_org_certif_Biodynamic Association Certification","tom_org_certif_EU Green Leaf","tom_org_certif_IBD Brasil",
"tom_org_certif_India Organic (blue and red circle and swirl)","tom_org_certif_Jaivik Bharat (green check mark)",
"tom_org_certif_Organic Farmers and Growers (OF&G)","tom_org_certif_Organic Food Federation",
"tom_org_certif_PGS-India Green (red orb above green leaves)","tom_org_certif_PGS-India Organic (blue orb above green leaves)",
"tom_org_certif_Produto Organico Brasil","tom_org_certif_Quality Welsh Food Certification",
"tom_org_certif_Soil Association","tom_org_certif_USDA","tom_org_certif_Other (specify)")
combined_data <- combined_data %>%
mutate(tom_cert = ifelse(rowSums(select(., all_of(tom_cert_vector)), na.rm = TRUE) >= 1, 1, 0))
leaf_cert_vector <- c("leaf_org_certif_Biodynamic Association Certification","leaf_org_certif_EU Green Leaf","leaf_org_certif_IBD Brasil",
"leaf_org_certif_India Organic (blue and red circle and swirl)","leaf_org_certif_Jaivik Bharat (green check mark)",
"leaf_org_certif_Organic Farmers and Growers (OF&G)","leaf_org_certif_Organic Food Federation",
"leaf_org_certif_PGS-India Green (red orb above green leaves)","leaf_org_certif_PGS-India Organic (blue orb above green leaves)",
"leaf_org_certif_Produto Organico Brasil","leaf_org_certif_Quality Welsh Food Certification",
"leaf_org_certif_Soil Association","leaf_org_certif_USDA","leaf_org_certif_Other (specify)")
combined_data <- combined_data %>%
mutate(leaf_cert = ifelse(rowSums(select(., all_of(leaf_cert_vector)), na.rm = TRUE) >= 1, 1, 0))
ban_cert_vector <- c("ban_org_certif_Biodynamic Association Certification","ban_org_certif_EU Green Leaf","ban_org_certif_IBD Brasil",
"ban_org_certif_India Organic (blue and red circle and swirl)","ban_org_certif_Jaivik Bharat (green check mark)",
"ban_org_certif_Organic Farmers and Growers (OF&G)","ban_org_certif_Organic Food Federation",
"ban_org_certif_PGS-India Green (red orb above green leaves)","ban_org_certif_PGS-India Organic (blue orb above green leaves)",
"ban_org_certif_Produto Organico Brasil","ban_org_certif_Quality Welsh Food Certification",
"ban_org_certif_Soil Association","ban_org_certif_USDA","ban_org_certif_Other (specify)")
combined_data <- combined_data %>%
mutate(ban_cert = ifelse(rowSums(select(., all_of(ban_cert_vector)), na.rm = TRUE) >= 1, 1, 0))
man_cert_vector <- c("man_org_certif_Biodynamic Association Certification","man_org_certif_EU Green Leaf","man_org_certif_IBD Brasil",
"man_org_certif_India Organic (blue and red circle and swirl)","man_org_certif_Jaivik Bharat (green check mark)",
"man_org_certif_Organic Farmers and Growers (OF&G)","man_org_certif_Organic Food Federation",
"man_org_certif_PGS-India Green (red orb above green leaves)","man_org_certif_PGS-India Organic (blue orb above green leaves)",
"man_org_certif_Produto Organico Brasil","man_org_certif_Quality Welsh Food Certification",
"man_org_certif_Soil Association","man_org_certif_USDA","man_org_certif_Other (specify)")
combined_data <- combined_data %>%
mutate(man_cert = ifelse(rowSums(select(., all_of(man_cert_vector)), na.rm = TRUE) >= 1, 1, 0))
fj_cert_vector <- c("fj_org_certif_Biodynamic Association Certification","fj_org_certif_EU Green Leaf","fj_org_certif_IBD Brasil",
"fj_org_certif_India Organic (blue and red circle and swirl)","fj_org_certif_Jaivik Bharat (green check mark)",
"fj_org_certif_Organic Farmers and Growers (OF&G)","fj_org_certif_Organic Food Federation",
"fj_org_certif_PGS-India Green (red orb above green leaves)","fj_org_certif_PGS-India Organic (blue orb above green leaves)",
"fj_org_certif_Produto Organico Brasil","fj_org_certif_Quality Welsh Food Certification",
"fj_org_certif_Soil Association","fj_org_certif_USDA","fj_org_certif_Other (specify)")
combined_data <- combined_data %>%
mutate(fj_cert = ifelse(rowSums(select(., all_of(fj_cert_vector)), na.rm = TRUE) >= 1, 1, 0))
milk_cert_vector <- c("milk_org_certif_Biodynamic Association Certification","milk_org_certif_EU Green Leaf","milk_org_certif_IBD Brasil",
"milk_org_certif_India Organic (blue and red circle and swirl)","milk_org_certif_Jaivik Bharat (green check mark)",
"milk_org_certif_Organic Farmers and Growers (OF&G)","milk_org_certif_Organic Food Federation",
"milk_org_certif_PGS-India Green (red orb above green leaves)","milk_org_certif_PGS-India Organic (blue orb above green leaves)",
"milk_org_certif_Produto Organico Brasil","milk_org_certif_Quality Welsh Food Certification",
"milk_org_certif_Soil Association","milk_org_certif_USDA","milk_org_certif_Other (specify)")
combined_data <- combined_data %>%
mutate(milk_cert = ifelse(rowSums(select(., all_of(milk_cert_vector)), na.rm = TRUE) >= 1, 1, 0))
cof_cert_vector <- c("cof_org_certif_Biodynamic Association Certification","cof_org_certif_EU Green Leaf","cof_org_certif_IBD Brasil",
"cof_org_certif_India Organic (blue and red circle and swirl)","cof_org_certif_Jaivik Bharat (green check mark)",
"cof_org_certif_Organic Farmers and Growers (OF&G)","cof_org_certif_Organic Food Federation",
"cof_org_certif_PGS-India Green (red orb above green leaves)","cof_org_certif_PGS-India Organic (blue orb above green leaves)",
"cof_org_certif_Produto Organico Brasil","cof_org_certif_Quality Welsh Food Certification",
"cof_org_certif_Soil Association","cof_org_certif_USDA","cof_org_certif_Other (specify)")
combined_data <- combined_data %>%
mutate(cof_cert = ifelse(rowSums(select(., all_of(cof_cert_vector)), na.rm = TRUE) >= 1, 1, 0))
tea_cert_vector <- c("tea_org_certif_Biodynamic Association Certification","tea_org_certif_EU Green Leaf","tea_org_certif_IBD Brasil",
"tea_org_certif_India Organic (blue and red circle and swirl)","tea_org_certif_Jaivik Bharat (green check mark)",
"tea_org_certif_Organic Farmers and Growers (OF&G)","tea_org_certif_Organic Food Federation",
"tea_org_certif_PGS-India Green (red orb above green leaves)","tea_org_certif_PGS-India Organic (blue orb above green leaves)",
"tea_org_certif_Produto Organico Brasil","tea_org_certif_Quality Welsh Food Certification",
"tea_org_certif_Soil Association","tea_org_certif_USDA","tea_org_certif_Other (specify)")
combined_data <- combined_data %>%
mutate(tea_cert = ifelse(rowSums(select(., all_of(tea_cert_vector)), na.rm = TRUE) >= 1, 1, 0))
mill_cert_vector <- c("mill_org_certif_Biodynamic Association Certification","mill_org_certif_EU Green Leaf","mill_org_certif_IBD Brasil",
"mill_org_certif_India Organic (blue and red circle and swirl)","mill_org_certif_Jaivik Bharat (green check mark)",
"mill_org_certif_Organic Farmers and Growers (OF&G)","mill_org_certif_Organic Food Federation",
"mill_org_certif_PGS-India Green (red orb above green leaves)","mill_org_certif_PGS-India Organic (blue orb above green leaves)",
"mill_org_certif_Produto Organico Brasil","mill_org_certif_Quality Welsh Food Certification",
"mill_org_certif_Soil Association","mill_org_certif_USDA","mill_org_certif_Other (specify)")
combined_data <- combined_data %>%
mutate(mill_cert = ifelse(rowSums(select(., all_of(mill_cert_vector)), na.rm = TRUE) >= 1, 1, 0))
daal_cert_vector <- c("daal_org_certif_Biodynamic Association Certification","daal_org_certif_EU Green Leaf","daal_org_certif_IBD Brasil",
"daal_org_certif_India Organic (blue and red circle and swirl)","daal_org_certif_Jaivik Bharat (green check mark)",
"daal_org_certif_Organic Farmers and Growers (OF&G)","daal_org_certif_Organic Food Federation",
"daal_org_certif_PGS-India Green (red orb above green leaves)","daal_org_certif_PGS-India Organic (blue orb above green leaves)",
"daal_org_certif_Produto Organico Brasil","daal_org_certif_Quality Welsh Food Certification",
"daal_org_certif_Soil Association","daal_org_certif_USDA","daal_org_certif_Other (specify)")
combined_data <- combined_data %>%
mutate(daal_cert = ifelse(rowSums(select(., all_of(daal_cert_vector)), na.rm = TRUE) >= 1, 1, 0))
wht_cert_vector <- c("wht_org_certif_Biodynamic Association Certification","wht_org_certif_EU Green Leaf","wht_org_certif_IBD Brasil",
"wht_org_certif_India Organic (blue and red circle and swirl)","wht_org_certif_Jaivik Bharat (green check mark)",
"wht_org_certif_Organic Farmers and Growers (OF&G)","wht_org_certif_Organic Food Federation",
"wht_org_certif_PGS-India Green (red orb above green leaves)","wht_org_certif_PGS-India Organic (blue orb above green leaves)",
"wht_org_certif_Produto Organico Brasil","wht_org_certif_Quality Welsh Food Certification",
"wht_org_certif_Soil Association","wht_org_certif_USDA","wht_org_certif_Other (specify)")
combined_data <- combined_data %>%
mutate(wht_cert = ifelse(rowSums(select(., all_of(wht_cert_vector)), na.rm = TRUE) >= 1, 1, 0))
rice_cert_vector <- c("rice_org_certif_Biodynamic Association Certification","rice_org_certif_EU Green Leaf","rice_org_certif_IBD Brasil",
"rice_org_certif_India Organic (blue and red circle and swirl)","rice_org_certif_Jaivik Bharat (green check mark)",
"rice_org_certif_Organic Farmers and Growers (OF&G)","rice_org_certif_Organic Food Federation",
"rice_org_certif_PGS-India Green (red orb above green leaves)","rice_org_certif_PGS-India Organic (blue orb above green leaves)",
"rice_org_certif_Produto Organico Brasil","rice_org_certif_Quality Welsh Food Certification",
"rice_org_certif_Soil Association","rice_org_certif_USDA","rice_org_certif_Other (specify)")
combined_data <- combined_data %>%
mutate(rice_cert = ifelse(rowSums(select(., all_of(rice_cert_vector)), na.rm = TRUE) >= 1, 1, 0))
nut_cert_vector <- c("nut_org_certif_Biodynamic Association Certification","nut_org_certif_EU Green Leaf","nut_org_certif_IBD Brasil",
"nut_org_certif_India Organic (blue and red circle and swirl)","nut_org_certif_Jaivik Bharat (green check mark)",
"nut_org_certif_Organic Farmers and Growers (OF&G)","nut_org_certif_Organic Food Federation",
"nut_org_certif_PGS-India Green (red orb above green leaves)","nut_org_certif_PGS-India Organic (blue orb above green leaves)",
"nut_org_certif_Produto Organico Brasil","nut_org_certif_Quality Welsh Food Certification",
"nut_org_certif_Soil Association","nut_org_certif_USDA","nut_org_certif_Other (specify)")
combined_data <- combined_data %>%
mutate(nut_cert = ifelse(rowSums(select(., all_of(nut_cert_vector)), na.rm = TRUE) >= 1, 1, 0))
chic_cert_vector <- c("chic_org_certif_Biodynamic Association Certification","chic_org_certif_EU Green Leaf","chic_org_certif_IBD Brasil",
"chic_org_certif_India Organic (blue and red circle and swirl)","chic_org_certif_Jaivik Bharat (green check mark)",
"chic_org_certif_Organic Farmers and Growers (OF&G)","chic_org_certif_Organic Food Federation",
"chic_org_certif_PGS-India Green (red orb above green leaves)","chic_org_certif_PGS-India Organic (blue orb above green leaves)",
"chic_org_certif_Produto Organico Brasil","chic_org_certif_Quality Welsh Food Certification",
"chic_org_certif_Soil Association","chic_org_certif_USDA","chic_org_certif_Other (specify)")
combined_data <- combined_data %>%
mutate(chic_cert = ifelse(rowSums(select(., all_of(chic_cert_vector)), na.rm = TRUE) >= 1, 1, 0))
# Create cert_count variable to count per vendor the number of organic sentinel foods that are certified
certif_vector <- c("tom_cert","leaf_cert","ban_cert","man_cert","fj_cert","milk_cert","cof_cert",
"tea_cert","mill_cert","daal_cert","wht_cert","rice_cert","nut_cert","chic_cert")
combined_data <- combined_data %>%
mutate(cert_count = rowSums(select(., all_of(certif_vector)) == 1, na.rm = TRUE))
# Create theme_health_count variable to count per vendor the number of organic sentinel foods with the theme health
theme_health_vector <- c("tom_org_pack_themes_Health benefits","leaf_org_pack_themes_Health benefits","ban_org_pack_themes_Health benefits",
"man_org_pack_themes_Health benefits","fj_org_pack_themes_Health benefits","milk_org_pack_themes_Health benefits",
"cof_org_pack_themes_Health benefits","tea_org_pack_themes_Health benefits","mill_org_pack_themes_Health benefits",
"daal_org_pack_themes_Health benefits","wht_org_pack_themes_Health benefits","rice_org_pack_themes_Health benefits",
"nut_org_pack_themes_Health benefits","chic_org_pack_themes_Health benefits")
combined_data <- combined_data %>%
mutate(theme_health_count = rowSums(select(., all_of(theme_health_vector)) == 1, na.rm = TRUE))
# Create theme_sj_count variable to count per vendor the number of organic sentinel foods with the theme social justice
theme_sj_vector <- c("tom_org_pack_themes_Social justice (e.g. farmer wellbeing)","leaf_org_pack_themes_Social justice (e.g. farmer wellbeing)","ban_org_pack_themes_Social justice (e.g. farmer wellbeing)",
"man_org_pack_themes_Social justice (e.g. farmer wellbeing)","fj_org_pack_themes_Social justice (e.g. farmer wellbeing)","milk_org_pack_themes_Social justice (e.g. farmer wellbeing)",
"cof_org_pack_themes_Social justice (e.g. farmer wellbeing)","tea_org_pack_themes_Social justice (e.g. farmer wellbeing)","mill_org_pack_themes_Social justice (e.g. farmer wellbeing)",
"daal_org_pack_themes_Social justice (e.g. farmer wellbeing)","wht_org_pack_themes_Social justice (e.g. farmer wellbeing)","rice_org_pack_themes_Social justice (e.g. farmer wellbeing)",
"nut_org_pack_themes_Social justice (e.g. farmer wellbeing)","chic_org_pack_themes_Social justice (e.g. farmer wellbeing)")
combined_data <- combined_data %>%
mutate(theme_sj_count = rowSums(select(., all_of(theme_sj_vector)) == 1, na.rm = TRUE))
# Create theme_env_count variable to count per vendor the number of organic sentinel foods with the theme environmental benefits
theme_env_vector <- c("tom_org_pack_themes_Environmental benefits","leaf_org_pack_themes_Environmental benefits","ban_org_pack_themes_Environmental benefits",
"man_org_pack_themes_Environmental benefits","fj_org_pack_themes_Environmental benefits","milk_org_pack_themes_Environmental benefits",
"cof_org_pack_themes_Environmental benefits","tea_org_pack_themes_Environmental benefits","mill_org_pack_themes_Environmental benefits",
"daal_org_pack_themes_Environmental benefits","wht_org_pack_themes_Environmental benefits","rice_org_pack_themes_Environmental benefits",
"nut_org_pack_themes_Environmental benefits","chic_org_pack_themes_Environmental benefits")
combined_data <- combined_data %>%
mutate(theme_env_count = rowSums(select(., all_of(theme_env_vector)) == 1, na.rm = TRUE))
# Create theme_trad_count variable to count per vendor the number of organic sentinel foods with the theme tradition / culture
theme_trad_vector <- c("tom_org_pack_themes_Tradition / culture","leaf_org_pack_themes_Tradition / culture","ban_org_pack_themes_Tradition / culture",
"man_org_pack_themes_Tradition / culture","fj_org_pack_themes_Tradition / culture","milk_org_pack_themes_Tradition / culture",
"cof_org_pack_themes_Tradition / culture","tea_org_pack_themes_Tradition / culture","mill_org_pack_themes_Tradition / culture",
"daal_org_pack_themes_Tradition / culture","wht_org_pack_themes_Tradition / culture","rice_org_pack_themes_Tradition / culture",
"nut_org_pack_themes_Tradition / culture","chic_org_pack_themes_Tradition / culture")
combined_data <- combined_data %>%
mutate(theme_trad_count = rowSums(select(., all_of(theme_trad_vector)) == 1, na.rm = TRUE))
# Create theme_taste_count variable to count per vendor the number of organic sentinel foods with the theme taste
theme_taste_vector <- c("tom_org_pack_themes_Taste","leaf_org_pack_themes_Taste","ban_org_pack_themes_Taste",
"man_org_pack_themes_Taste","fj_org_pack_themes_Taste","milk_org_pack_themes_Taste",
"cof_org_pack_themes_Taste","tea_org_pack_themes_Taste","mill_org_pack_themes_Taste",
"daal_org_pack_themes_Taste","wht_org_pack_themes_Taste","rice_org_pack_themes_Taste",
"nut_org_pack_themes_Taste","chic_org_pack_themes_Taste")
combined_data <- combined_data %>%
mutate(theme_taste_count = rowSums(select(., all_of(theme_taste_vector)) == 1, na.rm = TRUE))
# Create theme_qual_count variable to count per vendor the number of organic sentinel foods with the theme quality
theme_qual_vector <- c("tom_org_pack_themes_Quality","leaf_org_pack_themes_Quality","ban_org_pack_themes_Quality",
"man_org_pack_themes_Quality","fj_org_pack_themes_Quality","milk_org_pack_themes_Quality",
"cof_org_pack_themes_Quality","tea_org_pack_themes_Quality","mill_org_pack_themes_Quality",
"daal_org_pack_themes_Quality","wht_org_pack_themes_Quality","rice_org_pack_themes_Quality",
"nut_org_pack_themes_Quality","chic_org_pack_themes_Quality")
combined_data <- combined_data %>%
mutate(theme_qual_count = rowSums(select(., all_of(theme_qual_vector)) == 1, na.rm = TRUE))
# Create theme_life_count variable to count per vendor the number of organic sentinel foods with the theme lifestyle (e.g. “live an organic life”)
theme_life_vector <- c('tom_org_pack_themes_Lifestyle (e.g. "live an organic life")', 'leaf_org_pack_themes_Lifestyle (e.g. "live an organic life")',
'ban_org_pack_themes_Lifestyle (e.g. "live an organic life")', 'man_org_pack_themes_Lifestyle (e.g. "live an organic life")',
'fj_org_pack_themes_Lifestyle (e.g. "live an organic life")', 'milk_org_pack_themes_Lifestyle (e.g. "live an organic life")',
'cof_org_pack_themes_Lifestyle (e.g. "live an organic life")', 'tea_org_pack_themes_Lifestyle (e.g. "live an organic life")',
'mill_org_pack_themes_Lifestyle (e.g. "live an organic life")', 'daal_org_pack_themes_Lifestyle (e.g. "live an organic life")',
'wht_org_pack_themes_Lifestyle (e.g. "live an organic life")', 'rice_org_pack_themes_Lifestyle (e.g. "live an organic life")',
'nut_org_pack_themes_Lifestyle (e.g. "live an organic life")', 'chic_org_pack_themes_Lifestyle (e.g. "live an organic life")')
combined_data <- combined_data %>%
mutate(theme_life_count = rowSums(select(., all_of(theme_life_vector)) == 1, na.rm = TRUE))
# Create theme_none_count variable to count per vendor the number of organic sentinel foods with no theme
theme_none_vector <- c("tom_org_pack_themes_None","leaf_org_pack_themes_None","ban_org_pack_themes_None",
"man_org_pack_themes_None","fj_org_pack_themes_None","milk_org_pack_themes_None",
"cof_org_pack_themes_None","tea_org_pack_themes_None","mill_org_pack_themes_None",
"daal_org_pack_themes_None","wht_org_pack_themes_None","rice_org_pack_themes_None",
"nut_org_pack_themes_None","chic_org_pack_themes_None")
combined_data <- combined_data %>%
mutate(theme_none_count = rowSums(select(., all_of(theme_none_vector)) == 1, na.rm = TRUE))
# Create theme_na_count variable to count per vendor the number of organic sentinel foods for which theme is not applicable (e.g. no/blank packaging)
theme_na_vector <- c("tom_org_pack_themes_Not applicable (no packaging or blank packaging)","leaf_org_pack_themes_Not applicable (no packaging or blank packaging)","ban_org_pack_themes_Not applicable (no packaging or blank packaging)",
"man_org_pack_themes_Not applicable (no packaging or blank packaging)","fj_org_pack_themes_Not applicable (no packaging or blank packaging)","milk_org_pack_themes_Not applicable (no packaging or blank packaging)",
"cof_org_pack_themes_Not applicable (no packaging or blank packaging)","tea_org_pack_themes_Not applicable (no packaging or blank packaging)","mill_org_pack_themes_Not applicable (no packaging or blank packaging)",
"daal_org_pack_themes_Not applicable (no packaging or blank packaging)","wht_org_pack_themes_Not applicable (no packaging or blank packaging)","rice_org_pack_themes_Not applicable (no packaging or blank packaging)",
"nut_org_pack_themes_Not applicable (no packaging or blank packaging)","chic_org_pack_themes_Not applicable (no packaging or blank packaging)")
combined_data <- combined_data %>%
mutate(theme_na_count = rowSums(select(., all_of(theme_na_vector)) == 1, na.rm = TRUE))
# Create theme_other_count variable to count per vendor the number of organic sentinel foods with an unspecified/other theme
theme_other_vector <- c("tom_org_pack_themes_Other (specify)","leaf_org_pack_themes_Other (specify)","ban_org_pack_themes_Other (specify)",
"man_org_pack_themes_Other (specify)","fj_org_pack_themes_Other (specify)","milk_org_pack_themes_Other (specify)",
"cof_org_pack_themes_Other (specify)","tea_org_pack_themes_Other (specify)","mill_org_pack_themes_Other (specify)",
"daal_org_pack_themes_Other (specify)","wht_org_pack_themes_Other (specify)","rice_org_pack_themes_Other (specify)",
"nut_org_pack_themes_Other (specify)","chic_org_pack_themes_Other (specify)")
combined_data <- combined_data %>%
mutate(theme_other_count = rowSums(select(., all_of(theme_other_vector)) == 1, na.rm = TRUE))
# Create foods_count variable to count per vendor the number of sentinel foods, both organic and non-organic
foods_count_vector <- c("tom_sell","leaf_sell","ban_sell","man_sell","fj_sell",
"milk_sell","cof_sell","tea_sell","mill_sell","daal_sell",
"wht_sell","rice_sell","nut_sell","chic_sell")
combined_data <- combined_data %>%
mutate(foods_count = rowSums(select(., all_of(foods_count_vector)) == "Yes", na.rm = TRUE))
# 13. EXPORT DATA TO EXCEL FILES----
# OVERALL DATA
# Create workbook of cleaned data
data_clean <- createWorkbook()
addWorksheet(data_clean, "data")
# Export cleaned data
writeData(data_clean, sheet = "data", x = combined_data)
# Save the workbook
saveWorkbook(data_clean, "C:/Users/s1985751/Documents/GitHub/fea/data_clean.xlsx", overwrite = TRUE)
# RICE PRICE DATA
# Create workbook of rice price data
rice_prices_data_clean <- createWorkbook()
addWorksheet(rice_prices_data_clean, "data")
# Export cleaned data
writeData(rice_prices_data_clean, sheet = "data", x = rice_prices_data)
# Save the workbook
saveWorkbook(rice_prices_data_clean, "C:/Users/s1985751/Documents/GitHub/fea/rice_prices_data_clean.xlsx", overwrite = TRUE)
#write.xlsx(combined_data, "combined_data.xlsx")
#write.xlsx(qdata1, "qdata1.xlsx")
#write.xlsx(rdata1, "rdata1.xlsx")
#write.xlsx(data_types, "data_types.xlsx")
# Print all unique responses
print(all_responses_cert2$response)
