View(data_clean)
tabS5_data_india <- data_clean %>%
filter(country == "India")
View(tabS5_data_india)
# Vector of product abbreviations
products <- c("tom", "leaf", "ban", "man", "fj", "milk", "cof", "tea", "mill", "chic", "daal", "wht", "rice", "nut")
# Vector of countries
countries <- c("Brazil", "India", "UK", "Overall")
# Define a function to create the category summary for a given dataset
create_category_summary <- function(data) {
# PRODUCT-LEVEL SUMMARY
tabS5_product_summary_list <- lapply(products, function(product) {
data %>%
summarise(
org_count = sum(get(paste0(product, "_org")) == "Yes", na.rm = TRUE),
cert_count = sum(get(paste0(product, "_cert")) >= 1, na.rm = TRUE), # Certified organic products
# Organic term and certification
term_organic_count = sum(get(paste0(product, "_org_terms_Organic")) == 1, na.rm = TRUE),
term_organic_certified = sum(get(paste0(product, "_org_terms_Organic")) == 1 &
get(paste0(product, "_cert")) >= 1, na.rm = TRUE),
term_organic_certified_perc = term_organic_certified / term_organic_count,
# Natural term and certification
term_natural_count = sum(get(paste0(product, "_org_terms_Natural")) == 1, na.rm = TRUE),
term_natural_certified = sum(get(paste0(product, "_org_terms_Natural")) == 1 &
get(paste0(product, "_cert")) >= 1, na.rm = TRUE),
term_natural_certified_perc = term_natural_certified / term_natural_count,
# Chemical-free term and certification
term_chemfree_count = sum(get(paste0(product, "_org_terms_Chemical-free")) == 1, na.rm = TRUE),
term_chemfree_certified = sum(get(paste0(product, "_org_terms_Chemical-free")) == 1 &
get(paste0(product, "_cert")) >= 1, na.rm = TRUE),
term_chemfree_certified_perc = term_chemfree_certified / term_chemfree_count,
# Pesticide-free term and certification
term_pestfree_count = sum(get(paste0(product, "_org_terms_Pesticide-free")) == 1, na.rm = TRUE),
term_pestfree_certified = sum(get(paste0(product, "_org_terms_Pesticide-free")) == 1 &
get(paste0(product, "_cert")) >= 1, na.rm = TRUE),
term_pestfree_certified_perc = term_pestfree_certified / term_pestfree_count,
# Bioproducts term and certification
term_bioprod_count = sum(get(paste0(product, "_org_terms_Bioproducts")) == 1, na.rm = TRUE),
term_bioprod_certified = sum(get(paste0(product, "_org_terms_Bioproducts")) == 1 &
get(paste0(product, "_cert")) >= 1, na.rm = TRUE),
term_bioprod_certified_perc = term_bioprod_certified / term_bioprod_count,
# Bio term and certification
term_bio_count = sum(get(paste0(product, "_org_terms_Bio")) == 1, na.rm = TRUE),
term_bio_certified = sum(get(paste0(product, "_org_terms_Bio")) == 1 &
get(paste0(product, "_cert")) >= 1, na.rm = TRUE),
term_bio_certified_perc = term_bio_certified / term_bio_count,
# Eco term and certification
term_eco_count = sum(get(paste0(product, "_org_terms_Eco")) == 1, na.rm = TRUE),
term_eco_certified = sum(get(paste0(product, "_org_terms_Eco")) == 1 &
get(paste0(product, "_cert")) >= 1, na.rm = TRUE),
term_eco_certified_perc = term_eco_certified / term_eco_count,
# GMO-free term and certification
term_gmo_count = sum(get(paste0(product, "_org_terms_GMO-free")) == 1, na.rm = TRUE),
term_gmo_certified = sum(get(paste0(product, "_org_terms_GMO-free")) == 1 &
get(paste0(product, "_cert")) >= 1, na.rm = TRUE),
term_gmo_certified_perc = term_gmo_certified / term_gmo_count
) %>%
mutate(
product = product,
category = case_when(product %in% c("fj", "milk", "cof", "tea") ~ "beverages",
product %in% c("tom", "leaf", "ban", "man") ~ "fresh produce",
TRUE ~ "other")
) %>%
select(category, product, everything())
})
tabS5_product_summary <- bind_rows(tabS5_product_summary_list)
# CATEGORY-LEVEL SUMMARY
tabS5_category_summary <- tabS5_product_summary %>%
group_by(category) %>%
summarise(
cat_org_count = sum(org_count, na.rm = TRUE),
cat_cert_count = sum(cert_count, na.rm = TRUE),
cat_term_organic_count = sum(term_organic_count, na.rm = TRUE),
cat_term_organic_certified = sum(term_organic_certified, na.rm = TRUE),
cat_term_organic_certified_perc = cat_term_organic_certified / cat_term_organic_count,
cat_term_natural_count = sum(term_natural_count, na.rm = TRUE),
cat_term_natural_certified = sum(term_natural_certified, na.rm = TRUE),
cat_term_natural_certified_perc = cat_term_natural_certified / cat_term_natural_count,
cat_term_chemfree_count = sum(term_chemfree_count, na.rm = TRUE),
cat_term_chemfree_certified = sum(term_chemfree_certified, na.rm = TRUE),
cat_term_chemfree_certified_perc = cat_term_chemfree_certified / cat_term_chemfree_count,
cat_term_pestfree_count = sum(term_pestfree_count, na.rm = TRUE),
cat_term_pestfree_certified = sum(term_pestfree_certified, na.rm = TRUE),
cat_term_pestfree_certified_perc = cat_term_pestfree_certified / cat_term_pestfree_count,
cat_term_bioprod_count = sum(term_bioprod_count, na.rm = TRUE),
cat_term_bioprod_certified = sum(term_bioprod_certified, na.rm = TRUE),
cat_term_bioprod_certified_perc = cat_term_bioprod_certified / cat_term_bioprod_count,
cat_term_bio_count = sum(term_bio_count, na.rm = TRUE),
cat_term_bio_certified = sum(term_bio_certified, na.rm = TRUE),
cat_term_bio_certified_perc = cat_term_bio_certified / cat_term_bio_count,
cat_term_eco_count = sum(term_eco_count, na.rm = TRUE),
cat_term_eco_certified = sum(term_eco_certified, na.rm = TRUE),
cat_term_eco_certified_perc = cat_term_eco_certified / cat_term_eco_count,
cat_term_gmo_count = sum(term_gmo_count, na.rm = TRUE),
cat_term_gmo_certified = sum(term_gmo_certified, na.rm = TRUE),
cat_term_gmo_certified_perc = cat_term_gmo_certified / cat_term_gmo_count
)
# Calculate the totals across all categories
totals_row <- tabS5_category_summary %>%
summarise(
category = "Total",
cat_org_count = sum(cat_org_count, na.rm = TRUE),
cat_cert_count = sum(cat_cert_count, na.rm = TRUE),
cat_term_organic_count = sum(cat_term_organic_count, na.rm = TRUE),
cat_term_organic_certified = sum(cat_term_organic_certified, na.rm = TRUE),
cat_term_organic_certified_perc = cat_term_organic_certified / cat_term_organic_count,
cat_term_natural_count = sum(cat_term_natural_count, na.rm = TRUE),
cat_term_natural_certified = sum(cat_term_natural_certified, na.rm = TRUE),
cat_term_natural_certified_perc = cat_term_natural_certified / cat_term_natural_count,
cat_term_chemfree_count = sum(cat_term_chemfree_count, na.rm = TRUE),
cat_term_chemfree_certified = sum(cat_term_chemfree_certified, na.rm = TRUE),
cat_term_chemfree_certified_perc = cat_term_chemfree_certified / cat_term_chemfree_count,
cat_term_pestfree_count = sum(cat_term_pestfree_count, na.rm = TRUE),
cat_term_pestfree_certified = sum(cat_term_pestfree_certified, na.rm = TRUE),
cat_term_pestfree_certified_perc = cat_term_pestfree_certified / cat_term_pestfree_count,
cat_term_bioprod_count = sum(cat_term_bioprod_count, na.rm = TRUE),
cat_term_bioprod_certified = sum(cat_term_bioprod_certified, na.rm = TRUE),
cat_term_bioprod_certified_perc = cat_term_bioprod_certified / cat_term_bioprod_count,
cat_term_bio_count = sum(cat_term_bio_count, na.rm = TRUE),
cat_term_bio_certified = sum(cat_term_bio_certified, na.rm = TRUE),
cat_term_bio_certified_perc = cat_term_bio_certified / cat_term_bio_count,
cat_term_eco_count = sum(cat_term_eco_count, na.rm = TRUE),
cat_term_eco_certified = sum(cat_term_eco_certified, na.rm = TRUE),
cat_term_eco_certified_perc = cat_term_eco_certified / cat_term_eco_count,
cat_term_gmo_count = sum(cat_term_gmo_count, na.rm = TRUE),
cat_term_gmo_certified = sum(cat_term_gmo_certified, na.rm = TRUE),
cat_term_gmo_certified_perc = cat_term_gmo_certified / cat_term_gmo_count
)
# Append the totals row to the category summary table
tabS5_category_summary <- bind_rows(tabS5_category_summary, totals_row)
return(tabS5_category_summary)
}
# Run the function for each country and combine results into one table
results_list <- lapply(countries, function(country) {
if (country == "Overall") {
data <- tabS5_data
} else {
# Ensure filtering by country works
data <- tabS5_data %>% filter(country == !!country)
}
summary_table <- create_category_summary(data)
summary_table %>%
mutate(country = country) %>%
select(country, everything())
})
# Create new instance of dataset for Table S5
tabS5_data_india <- data_clean %>%
filter(country == "India")
# Vector of product abbreviations
products <- c("tom", "leaf", "ban", "man", "fj", "milk", "cof", "tea", "mill", "chic", "daal", "wht", "rice", "nut")
# Vector of countries
countries <- c("Brazil", "India", "UK", "Overall")
# Define a function to create the category summary for a given dataset
create_category_summary <- function(data) {
# PRODUCT-LEVEL SUMMARY
tabS5_product_summary_list <- lapply(products, function(product) {
data %>%
summarise(
org_count = sum(get(paste0(product, "_org")) == "Yes", na.rm = TRUE),
cert_count = sum(get(paste0(product, "_cert")) >= 1, na.rm = TRUE), # Certified organic products
# Organic term and certification
term_organic_count = sum(get(paste0(product, "_org_terms_Organic")) == 1, na.rm = TRUE),
term_organic_certified = sum(get(paste0(product, "_org_terms_Organic")) == 1 &
get(paste0(product, "_cert")) >= 1, na.rm = TRUE),
term_organic_certified_perc = term_organic_certified / term_organic_count,
# Natural term and certification
term_natural_count = sum(get(paste0(product, "_org_terms_Natural")) == 1, na.rm = TRUE),
term_natural_certified = sum(get(paste0(product, "_org_terms_Natural")) == 1 &
get(paste0(product, "_cert")) >= 1, na.rm = TRUE),
term_natural_certified_perc = term_natural_certified / term_natural_count,
# Chemical-free term and certification
term_chemfree_count = sum(get(paste0(product, "_org_terms_Chemical-free")) == 1, na.rm = TRUE),
term_chemfree_certified = sum(get(paste0(product, "_org_terms_Chemical-free")) == 1 &
get(paste0(product, "_cert")) >= 1, na.rm = TRUE),
term_chemfree_certified_perc = term_chemfree_certified / term_chemfree_count,
# Pesticide-free term and certification
term_pestfree_count = sum(get(paste0(product, "_org_terms_Pesticide-free")) == 1, na.rm = TRUE),
term_pestfree_certified = sum(get(paste0(product, "_org_terms_Pesticide-free")) == 1 &
get(paste0(product, "_cert")) >= 1, na.rm = TRUE),
term_pestfree_certified_perc = term_pestfree_certified / term_pestfree_count,
# Bioproducts term and certification
term_bioprod_count = sum(get(paste0(product, "_org_terms_Bioproducts")) == 1, na.rm = TRUE),
term_bioprod_certified = sum(get(paste0(product, "_org_terms_Bioproducts")) == 1 &
get(paste0(product, "_cert")) >= 1, na.rm = TRUE),
term_bioprod_certified_perc = term_bioprod_certified / term_bioprod_count,
# Bio term and certification
term_bio_count = sum(get(paste0(product, "_org_terms_Bio")) == 1, na.rm = TRUE),
term_bio_certified = sum(get(paste0(product, "_org_terms_Bio")) == 1 &
get(paste0(product, "_cert")) >= 1, na.rm = TRUE),
term_bio_certified_perc = term_bio_certified / term_bio_count,
# Eco term and certification
term_eco_count = sum(get(paste0(product, "_org_terms_Eco")) == 1, na.rm = TRUE),
term_eco_certified = sum(get(paste0(product, "_org_terms_Eco")) == 1 &
get(paste0(product, "_cert")) >= 1, na.rm = TRUE),
term_eco_certified_perc = term_eco_certified / term_eco_count,
# GMO-free term and certification
term_gmo_count = sum(get(paste0(product, "_org_terms_GMO-free")) == 1, na.rm = TRUE),
term_gmo_certified = sum(get(paste0(product, "_org_terms_GMO-free")) == 1 &
get(paste0(product, "_cert")) >= 1, na.rm = TRUE),
term_gmo_certified_perc = term_gmo_certified / term_gmo_count
) %>%
mutate(
product = product,
category = case_when(product %in% c("fj", "milk", "cof", "tea") ~ "beverages",
product %in% c("tom", "leaf", "ban", "man") ~ "fresh produce",
TRUE ~ "other")
) %>%
select(category, product, everything())
})
tabS5_product_summary <- bind_rows(tabS5_product_summary_list)
# CATEGORY-LEVEL SUMMARY
tabS5_category_summary <- tabS5_product_summary %>%
group_by(category) %>%
summarise(
cat_org_count = sum(org_count, na.rm = TRUE),
cat_cert_count = sum(cert_count, na.rm = TRUE),
cat_term_organic_count = sum(term_organic_count, na.rm = TRUE),
cat_term_organic_certified = sum(term_organic_certified, na.rm = TRUE),
cat_term_organic_certified_perc = cat_term_organic_certified / cat_term_organic_count,
cat_term_natural_count = sum(term_natural_count, na.rm = TRUE),
cat_term_natural_certified = sum(term_natural_certified, na.rm = TRUE),
cat_term_natural_certified_perc = cat_term_natural_certified / cat_term_natural_count,
cat_term_chemfree_count = sum(term_chemfree_count, na.rm = TRUE),
cat_term_chemfree_certified = sum(term_chemfree_certified, na.rm = TRUE),
cat_term_chemfree_certified_perc = cat_term_chemfree_certified / cat_term_chemfree_count,
cat_term_pestfree_count = sum(term_pestfree_count, na.rm = TRUE),
cat_term_pestfree_certified = sum(term_pestfree_certified, na.rm = TRUE),
cat_term_pestfree_certified_perc = cat_term_pestfree_certified / cat_term_pestfree_count,
cat_term_bioprod_count = sum(term_bioprod_count, na.rm = TRUE),
cat_term_bioprod_certified = sum(term_bioprod_certified, na.rm = TRUE),
cat_term_bioprod_certified_perc = cat_term_bioprod_certified / cat_term_bioprod_count,
cat_term_bio_count = sum(term_bio_count, na.rm = TRUE),
cat_term_bio_certified = sum(term_bio_certified, na.rm = TRUE),
cat_term_bio_certified_perc = cat_term_bio_certified / cat_term_bio_count,
cat_term_eco_count = sum(term_eco_count, na.rm = TRUE),
cat_term_eco_certified = sum(term_eco_certified, na.rm = TRUE),
cat_term_eco_certified_perc = cat_term_eco_certified / cat_term_eco_count,
cat_term_gmo_count = sum(term_gmo_count, na.rm = TRUE),
cat_term_gmo_certified = sum(term_gmo_certified, na.rm = TRUE),
cat_term_gmo_certified_perc = cat_term_gmo_certified / cat_term_gmo_count
)
# Calculate the totals across all categories
totals_row <- tabS5_category_summary %>%
summarise(
category = "Total",
cat_org_count = sum(cat_org_count, na.rm = TRUE),
cat_cert_count = sum(cat_cert_count, na.rm = TRUE),
cat_term_organic_count = sum(cat_term_organic_count, na.rm = TRUE),
cat_term_organic_certified = sum(cat_term_organic_certified, na.rm = TRUE),
cat_term_organic_certified_perc = cat_term_organic_certified / cat_term_organic_count,
cat_term_natural_count = sum(cat_term_natural_count, na.rm = TRUE),
cat_term_natural_certified = sum(cat_term_natural_certified, na.rm = TRUE),
cat_term_natural_certified_perc = cat_term_natural_certified / cat_term_natural_count,
cat_term_chemfree_count = sum(cat_term_chemfree_count, na.rm = TRUE),
cat_term_chemfree_certified = sum(cat_term_chemfree_certified, na.rm = TRUE),
cat_term_chemfree_certified_perc = cat_term_chemfree_certified / cat_term_chemfree_count,
cat_term_pestfree_count = sum(cat_term_pestfree_count, na.rm = TRUE),
cat_term_pestfree_certified = sum(cat_term_pestfree_certified, na.rm = TRUE),
cat_term_pestfree_certified_perc = cat_term_pestfree_certified / cat_term_pestfree_count,
cat_term_bioprod_count = sum(cat_term_bioprod_count, na.rm = TRUE),
cat_term_bioprod_certified = sum(cat_term_bioprod_certified, na.rm = TRUE),
cat_term_bioprod_certified_perc = cat_term_bioprod_certified / cat_term_bioprod_count,
cat_term_bio_count = sum(cat_term_bio_count, na.rm = TRUE),
cat_term_bio_certified = sum(cat_term_bio_certified, na.rm = TRUE),
cat_term_bio_certified_perc = cat_term_bio_certified / cat_term_bio_count,
cat_term_eco_count = sum(cat_term_eco_count, na.rm = TRUE),
cat_term_eco_certified = sum(cat_term_eco_certified, na.rm = TRUE),
cat_term_eco_certified_perc = cat_term_eco_certified / cat_term_eco_count,
cat_term_gmo_count = sum(cat_term_gmo_count, na.rm = TRUE),
cat_term_gmo_certified = sum(cat_term_gmo_certified, na.rm = TRUE),
cat_term_gmo_certified_perc = cat_term_gmo_certified / cat_term_gmo_count
)
# Append the totals row to the category summary table
tabS5_category_summary <- bind_rows(tabS5_category_summary, totals_row)
return(tabS5_category_summary)
}
# Run the function for each country and combine results into one table
results_list <- lapply(countries, function(country) {
if (country == "Overall") {
data <- tabS5_data_india
} else {
# Ensure filtering by country works
data <- tabS5_data_india %>% filter(country == !!country)
}
summary_table <- create_category_summary(data)
summary_table %>%
mutate(country = country) %>%
select(country, everything())
})
# Combine all results
tabS5_combined_summary <- bind_rows(results_list)
# Mutate to combine and clean up columns
tabS5_combined_summary <- tabS5_combined_summary %>%
mutate(
term_organic = paste0(cat_term_organic_certified, " (", round(cat_term_organic_certified_perc * 100), "%)"),
term_natural = paste0(cat_term_natural_certified, " (", round(cat_term_natural_certified_perc * 100), "%)"),
term_chemfree = paste0(cat_term_chemfree_certified, " (", round(cat_term_chemfree_certified_perc * 100), "%)"),
term_pestfree = paste0(cat_term_pestfree_certified, " (", round(cat_term_pestfree_certified_perc * 100), "%)"),
term_bioprod = paste0(cat_term_bioprod_certified, " (", round(cat_term_bioprod_certified_perc * 100), "%)"),
term_bio = paste0(cat_term_bio_certified, " (", round(cat_term_bio_certified_perc * 100), "%)"),
term_eco = paste0(cat_term_eco_certified, " (", round(cat_term_eco_certified_perc * 100), "%)"),
term_gmo = paste0(cat_term_gmo_certified, " (", round(cat_term_gmo_certified_perc * 100), "%)")
) %>%
select(country, category, cat_org_count, term_organic, term_natural,
term_chemfree, term_pestfree, term_bioprod, term_bio, term_eco, term_gmo)
# View the final combined summary table
tabS5_combined_summary
# Calculate table showing certifications per term
create_term_summary <- function(data) {
terms <- c("Organic", "Natural", "Chemical-free", "Pesticide-free", "Bioproducts", "Bio", "Eco", "GMO-free")
term_summary <- lapply(terms, function(term) {
certified_with_term <- 0
total_with_term <- 0
# Loop through all products to calculate totals
for (product in products) {
term_col <- paste0(product, "_org_terms_", term)
certified_col <- paste0(product, "_cert")
# Check if the columns exist
if (term_col %in% colnames(data) && certified_col %in% colnames(data)) {
certified_with_term <- certified_with_term +
sum(data[[term_col]] == 1 & data[[certified_col]] >= 1, na.rm = TRUE)
total_with_term <- total_with_term +
sum(data[[term_col]] == 1, na.rm = TRUE)
}
}
# Proportion of certified products
proportion_certified <- ifelse(total_with_term > 0, certified_with_term / total_with_term, 0)
# Return summary for the term
data.frame(
Term = term,
Certified = certified_with_term,
Total = total_with_term,
Proportion = round(proportion_certified * 100, 2)
)
})
term_summary_df <- bind_rows(term_summary)
return(term_summary_df)
}
# Apply the function to generate term-level summary for the entire dataset
term_summary_table <- create_term_summary(tabS5_data_india)
# View the final term summary table
term_summary_table
View(term_summary_table)
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(gmodels)
library(gt)
library(knitr)
library(kableExtra)
library(openxlsx)
library(readxl)
library(readr)
library(stats)
library(tidyr)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
data_clean <- read.xlsx("data_clean.xlsx", sheet = "data")
# Define order of neighbourhood variable
circle_order <- c("Higher","Middle","Lower")
# Convert the circle column to a factor with the specified levels
tab2_fig_data <- data_clean %>%
mutate(circle = factor(circle, levels = circle_order)) %>%
select(id, country, city, circle, org_vendor)
# Create table of neighbourhood data
tab2_fig_neighbourhood <- tab2_fig_data %>%
group_by(country, city, circle) %>%
summarise(
vendors = n(),
count_org_vendors = sum(org_vendor == 1, na.rm = TRUE),
org_vendor_perc = count_org_vendors / vendors
) %>%
ungroup()
# Create scatterplot stacked by country
ggplot(tab2_fig_neighbourhood, aes(x = circle, y = org_vendor_perc, color = circle)) +
geom_point(size = 3, alpha = 0.8) +         # Scatter points
facet_wrap(~ country, ncol = 1, scales = "free_y") +  # Facet countries in separate rows
labs(
x = "Neighbourhood",
y = "Organic Vendor Percentage"
) +
theme_light() +
theme(
strip.text = element_text(size = 12, face = "bold"),  # Country panel titles
axis.text.x = element_text(angle = 45, hjust = 1),   # Rotated x-axis labels
legend.position = "none"                             # Remove legend for 'Circle'
)
# Create stacked bar chart grouped by country
ggplot(tab2_fig_neighbourhood, aes(x = circle, y = org_vendor_perc, fill = city)) +
geom_bar(stat = "identity", position = "stack") +      # Stacked bar chart
facet_wrap(~ country, ncol = 1, scales = "free_y") +   # Facet countries in separate rows
labs(
x = "Neighbourhood",
y = "Organic Vendor Percentage"
) +
theme_light() +
theme(
strip.text = element_text(size = 12, face = "bold"),  # Country panel titles
axis.text.x = element_text(angle = 45, hjust = 1),   # Rotated x-axis labels
legend.title = element_text(size = 10),              # Adjust legend title size
legend.text = element_text(size = 8),                # Adjust legend text size
legend.position = "bottom"                           # Move legend to bottom
)
# Create grouped bar chart by country
ggplot(tab2_fig_neighbourhood, aes(x = circle, y = org_vendor_perc, fill = city)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +  # Grouped bars
facet_wrap(~ country, ncol = 1, scales = "free_y") +   # Facet countries in separate rows
labs(
x = "Neighbourhood",
y = "Organic Vendor Percentage"
) +
theme_light() +
theme(
strip.text = element_text(size = 12, face = "bold"),  # Country panel titles
axis.text.x = element_text(angle = 45, hjust = 1),   # Rotated x-axis labels
legend.title = element_text(size = 10),              # Adjust legend title size
legend.text = element_text(size = 8),                # Adjust legend text size
legend.position = "bottom"                           # Move legend to bottom
)
# Create grouped bar chart with city labels below the bars
ggplot(tab2_fig_neighbourhood, aes(x = city, y = org_vendor_perc, fill = circle)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +  # Grouped bars
facet_wrap(~ country, ncol = 1, scales = "free_y") +                  # Facet countries
labs(
x = "City",
y = "Organic Vendor Percentage"
) +
theme_light() +
theme(
strip.text = element_text(size = 12, face = "bold"),  # Country panel titles
axis.text.x = element_text(angle = 45, hjust = 1),   # Rotated x-axis labels
legend.title = element_blank(),                     # Remove legend title
legend.position = "none"                            # Remove legend completely
)
# Create grouped bar chart by country
ggplot(tab2_fig_neighbourhood, aes(x = circle, y = org_vendor_perc, fill = city)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +  # Grouped bars
facet_wrap(~ country, ncol = 1, scales = "free_y") +   # Facet countries in separate rows
labs(
x = "Neighbourhood",
y = "Organic Vendor Percentage"
) +
theme_light() +
theme(
strip.text = element_text(size = 12, face = "bold"),  # Country panel titles
axis.text.x = element_text(angle = 45, hjust = 1),   # Rotated x-axis labels
legend.title = element_text(size = 10),              # Adjust legend title size
legend.text = element_text(size = 8),                # Adjust legend text size
legend.position = "bottom"                           # Move legend to bottom
)
# Sample data (replace this with your actual data)
tab2_fig_neighbourhood <- data.frame(
country = rep(c("Brazil", "India", "UK"), each = 9),
city = rep(c("Rio de Janeiro", "Sao Paolo", "Sinop",
"Hyderabad", "Visakhapatnam", "Latur",
"London", "Birmingham", "Edinburgh"), times = 1),
circle = rep(c("Higher", "Middle", "Lower"), 9),
org_vendor_perc = runif(27, 0, 1)  # Random values for illustration
)
# Reshape data for barplot
library(reshape2)
install.packages("reshape2")
# Sample data (replace this with your actual data)
tab2_fig_neighbourhood <- data.frame(
country = rep(c("Brazil", "India", "UK"), each = 9),
city = rep(c("Rio de Janeiro", "Sao Paolo", "Sinop",
"Hyderabad", "Visakhapatnam", "Latur",
"London", "Birmingham", "Edinburgh"), times = 1),
circle = rep(c("Higher", "Middle", "Lower"), 9),
org_vendor_perc = runif(27, 0, 1)  # Random values for illustration
)
# Reshape data for barplot
library(reshape2)
tab2_fig_wide <- dcast(tab2_fig_neighbourhood, city + country ~ circle, value.var = "org_vendor_perc")
# Create grouped bar plots for each country
par(mfrow = c(3, 1), mar = c(5, 5, 4, 2))  # 3 panels, adjusted margins
countries <- unique(tab2_fig_neighbourhood$country)
for (country in countries) {
# Filter data for the specific country
country_data <- tab2_fig_wide[tab2_fig_wide$country == country, ]
# Transpose data for barplot
values <- t(as.matrix(country_data[, c("Higher", "Middle", "Lower")]))
# Barplot
barplot(values,
beside = TRUE,
col = c("skyblue", "pink", "lightgreen"),  # Colors for circles
names.arg = country_data$city,            # City names on x-axis
main = country,
xlab = "City",
ylab = "Organic Vendor Percentage",
las = 2,                                  # Rotate x-axis labels
cex.names = 0.8                           # Adjust label size
)
# Add legend
legend("topright", legend = c("Higher", "Middle", "Lower"), fill = c("skyblue", "pink", "lightgreen"))
}
# Create grouped bar chart by country
ggplot(tab2_fig_neighbourhood, aes(x = circle, y = org_vendor_perc, fill = city)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +  # Grouped bars
facet_wrap(~ country, ncol = 1, scales = "free_y") +   # Facet countries in separate rows
labs(
x = "Neighbourhood",
y = "Organic Vendor Percentage"
) +
theme_light() +
theme(
strip.text = element_text(size = 12, face = "bold"),  # Country panel titles
axis.text.x = element_text(angle = 45, hjust = 1),   # Rotated x-axis labels
legend.title = element_text(size = 10),              # Adjust legend title size
legend.text = element_text(size = 8),                # Adjust legend text size
legend.position = "bottom"                           # Move legend to bottom
)
