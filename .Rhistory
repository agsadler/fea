)
View(tab1_country_totals)
# Calculate overall totals across all countries
tab1_overall_totals <- tab1_data %>%
summarise(
country = "Overall",
total_vendors = sum(total_vendors, na.rm = TRUE),
Higher = sum(Higher, na.rm = TRUE),
Middle = sum(Middle, na.rm = TRUE),
Lower = sum(Lower, na.rm = TRUE),
`Mobile vendor` = sum(`Mobile vendor`, na.rm = TRUE),
`Stationary small local vendor` = sum(`Stationary small local vendor`, na.rm = TRUE),
Supermarket = sum(Supermarket, na.rm = TRUE)
) %>%
mutate(
higher_perc = Higher / total_vendors,
middle_perc = Middle / total_vendors,
lower_perc = Lower / total_vendors,
mobile_vendor_perc = `Mobile vendor` / total_vendors,
stationary_small_vendor_perc = `Stationary small local vendor` / total_vendors,
supermarket_perc = Supermarket / total_vendors,
city = "Overall"
)
View(tab1_overall_totals)
# Append country-level totals and overall totals to the main data
tab1_data_final <- tab1_data %>%
bind_rows(country_totals) %>%
bind_rows(overall_totals)
# Append country-level totals and overall totals to the main data
tab1_data_final <- tab1_data %>%
bind_rows(tab1_country_totals) %>%
bind_rows(tab1_overall_totals)
View(tab1_data_final)
# Append country-level totals and overall totals to the main data and clean up columns
tab1_data_final <- tab1_data %>%
bind_rows(tab1_country_totals) %>%
bind_rows(tab1_overall_totals) %>%
mutate(
neighbourhood_higher = paste0(Higher, " (", higher_perc, "%)"),
neighbourhood_middle = paste0(Middle, " (", middle_perc, "%)"),
neighbourhood_lower = paste0(Lower, " (", lower_perc, "%)"),
storetype_mob = paste0(`Mobile vendor`, " (", mobile_vendor_perc, "%)"),
storetype_stat = paste0(`Stationary small local vendor`, " (", stationary_small_vendor_perc, "%)"),
storetype_mob = paste0(Supermarket, " (", supermarket_perc, "%)")
)
View(tab1_data_final)
# Calculate total vendors per city
tab1_total_vendors <- data_clean %>%
group_by(country, city) %>%
summarise(total_vendors = n()) %>%
ungroup()
# Calculate neighbourhood counts and percentages
tab1_neighbourhood_data <- data_clean %>%
group_by(country, city, circle) %>%
summarise(count = n()) %>%
pivot_wider(names_from = circle, values_from = count, values_fill = list(count = 0)) %>%
ungroup() %>%
left_join(tab1_total_vendors, by = c("country", "city")) %>%
mutate(
higher_perc = round((Higher / total_vendors)*100,2),
middle_perc = round((Middle / total_vendors)*100,2),
lower_perc = round((Lower / total_vendors)*100,2)
) %>%
select(country, city, total_vendors, Higher, higher_perc, Middle, middle_perc, Lower, lower_perc)
# Calculate store type counts and percentages
tab1_store_data <- data_clean %>%
group_by(country, city, vendor_type) %>%
summarise(count = n()) %>%
pivot_wider(names_from = vendor_type, values_from = count, values_fill = list(count = 0)) %>%
ungroup() %>%
left_join(tab1_total_vendors, by = c("country", "city")) %>%
mutate(
supermarket_perc = round((Supermarket / total_vendors)*100,2),
mobile_vendor_perc = round((`Mobile vendor` / total_vendors)*100,2),
stationary_small_vendor_perc = round((`Stationary small local vendor` / total_vendors)*100,2)
) %>%
select(country, city, `Mobile vendor`, mobile_vendor_perc, `Stationary small local vendor`, stationary_small_vendor_perc, Supermarket, supermarket_perc,  )
# Merge both datasets
tab1_data <- tab1_neighbourhood_data %>%
left_join(tab1_store_data, by = c("country", "city"))
# Calculate country-level totals
tab1_country_totals <- tab1_data %>%
group_by(country) %>%
summarise(
total_vendors = sum(total_vendors, na.rm = TRUE),
Higher = sum(Higher, na.rm = TRUE),
Middle = sum(Middle, na.rm = TRUE),
Lower = sum(Lower, na.rm = TRUE),
`Mobile vendor` = sum(`Mobile vendor`, na.rm = TRUE),
`Stationary small local vendor` = sum(`Stationary small local vendor`, na.rm = TRUE),
Supermarket = sum(Supermarket, na.rm = TRUE)
) %>%
mutate(
higher_perc = round((Higher / total_vendors)*100, 2),
middle_perc = round((Middle / total_vendors)*100, 2),
lower_perc = round((Lower / total_vendors)*100, 2),
mobile_vendor_perc = round((`Mobile vendor` / total_vendors)*100,2),
stationary_small_vendor_perc = round((`Stationary small local vendor` / total_vendors)*100,2),
supermarket_perc = round((Supermarket / total_vendors)*100,2),
city = "Total"  # Mark these as totals per country
)
# Calculate overall totals across all countries
tab1_overall_totals <- tab1_data %>%
summarise(
country = "Overall",
total_vendors = sum(total_vendors, na.rm = TRUE),
Higher = sum(Higher, na.rm = TRUE),
Middle = sum(Middle, na.rm = TRUE),
Lower = sum(Lower, na.rm = TRUE),
`Mobile vendor` = sum(`Mobile vendor`, na.rm = TRUE),
`Stationary small local vendor` = sum(`Stationary small local vendor`, na.rm = TRUE),
Supermarket = sum(Supermarket, na.rm = TRUE)
) %>%
mutate(
higher_perc = round((Higher / total_vendors)*100,2),
middle_perc = round((Middle / total_vendors)*100,2),
lower_perc = round((Lower / total_vendors)*100,2),
mobile_vendor_perc = round((`Mobile vendor` / total_vendors)*100,2),
stationary_small_vendor_perc = round((`Stationary small local vendor` / total_vendors)*100,2),
supermarket_perc = round((Supermarket / total_vendors)*100,2),
city = "Overall"
)
# Append country-level totals and overall totals to the main data and clean up columns
tab1_data_final <- tab1_data %>%
bind_rows(tab1_country_totals) %>%
bind_rows(tab1_overall_totals) %>%
mutate(
neighbourhood_higher = paste0(Higher, " (", higher_perc, "%)"),
neighbourhood_middle = paste0(Middle, " (", middle_perc, "%)"),
neighbourhood_lower = paste0(Lower, " (", lower_perc, "%)"),
storetype_mob = paste0(`Mobile vendor`, " (", mobile_vendor_perc, "%)"),
storetype_stat = paste0(`Stationary small local vendor`, " (", stationary_small_vendor_perc, "%)"),
storetype_mob = paste0(Supermarket, " (", supermarket_perc, "%)")
)
View(tab1_data_final)
# Append country-level totals and overall totals to the main data and clean up columns
tab1_data_final <- tab1_data %>%
bind_rows(tab1_country_totals) %>%
bind_rows(tab1_overall_totals) %>%
mutate(
neighbourhood_higher = paste0(Higher, " (", higher_perc, "%)"),
neighbourhood_middle = paste0(Middle, " (", middle_perc, "%)"),
neighbourhood_lower = paste0(Lower, " (", lower_perc, "%)"),
storetype_mob = paste0(`Mobile vendor`, " (", mobile_vendor_perc, "%)"),
storetype_stat = paste0(`Stationary small local vendor`, " (", stationary_small_vendor_perc, "%)"),
storetype_super = paste0(Supermarket, " (", supermarket_perc, "%)")
)
# Append country-level totals and overall totals to the main data and clean up columns
tab1_data_final <- tab1_data %>%
bind_rows(tab1_country_totals) %>%
bind_rows(tab1_overall_totals) %>%
mutate(
neighbourhood_higher = paste0(Higher, " (", higher_perc, "%)"),
neighbourhood_middle = paste0(Middle, " (", middle_perc, "%)"),
neighbourhood_lower = paste0(Lower, " (", lower_perc, "%)"),
storetype_mob = paste0(`Mobile vendor`, " (", mobile_vendor_perc, "%)"),
storetype_stat = paste0(`Stationary small local vendor`, " (", stationary_small_vendor_perc, "%)"),
storetype_super = paste0(Supermarket, " (", supermarket_perc, "%)")
) %>%
select(country, city, total_vendors,
neighbourhood_higher, neighbourhood_middle, neighbourhood_lower,
storetype_mob, storetype_stat, storetype_super)
# Generate Table 1
# Calculate total vendors per city
tab1_total_vendors <- data_clean %>%
group_by(country, city) %>%
summarise(total_vendors = n()) %>%
ungroup()
# Calculate neighbourhood counts and percentages
tab1_neighbourhood_data <- data_clean %>%
group_by(country, city, circle) %>%
summarise(count = n()) %>%
pivot_wider(names_from = circle, values_from = count, values_fill = list(count = 0)) %>%
ungroup() %>%
left_join(tab1_total_vendors, by = c("country", "city")) %>%
mutate(
higher_perc = round((Higher / total_vendors)*100,2),
middle_perc = round((Middle / total_vendors)*100,2),
lower_perc = round((Lower / total_vendors)*100,2)
) %>%
select(country, city, total_vendors, Higher, higher_perc, Middle, middle_perc, Lower, lower_perc)
# Calculate store type counts and percentages
tab1_store_data <- data_clean %>%
group_by(country, city, vendor_type) %>%
summarise(count = n()) %>%
pivot_wider(names_from = vendor_type, values_from = count, values_fill = list(count = 0)) %>%
ungroup() %>%
left_join(tab1_total_vendors, by = c("country", "city")) %>%
mutate(
supermarket_perc = round((Supermarket / total_vendors)*100,2),
mobile_vendor_perc = round((`Mobile vendor` / total_vendors)*100,2),
stationary_small_vendor_perc = round((`Stationary small local vendor` / total_vendors)*100,2)
) %>%
select(country, city, `Mobile vendor`, mobile_vendor_perc, `Stationary small local vendor`, stationary_small_vendor_perc, Supermarket, supermarket_perc,  )
# Merge both datasets
tab1_data <- tab1_neighbourhood_data %>%
left_join(tab1_store_data, by = c("country", "city"))
# Calculate country-level totals
tab1_country_totals <- tab1_data %>%
group_by(country) %>%
summarise(
total_vendors = sum(total_vendors, na.rm = TRUE),
Higher = sum(Higher, na.rm = TRUE),
Middle = sum(Middle, na.rm = TRUE),
Lower = sum(Lower, na.rm = TRUE),
`Mobile vendor` = sum(`Mobile vendor`, na.rm = TRUE),
`Stationary small local vendor` = sum(`Stationary small local vendor`, na.rm = TRUE),
Supermarket = sum(Supermarket, na.rm = TRUE)
) %>%
mutate(
higher_perc = round((Higher / total_vendors)*100, 2),
middle_perc = round((Middle / total_vendors)*100, 2),
lower_perc = round((Lower / total_vendors)*100, 2),
mobile_vendor_perc = round((`Mobile vendor` / total_vendors)*100,2),
stationary_small_vendor_perc = round((`Stationary small local vendor` / total_vendors)*100,2),
supermarket_perc = round((Supermarket / total_vendors)*100,2),
city = "Total"  # Mark these as totals per country
)
# Calculate overall totals across all countries
tab1_overall_totals <- tab1_data %>%
summarise(
country = "Overall",
total_vendors = sum(total_vendors, na.rm = TRUE),
Higher = sum(Higher, na.rm = TRUE),
Middle = sum(Middle, na.rm = TRUE),
Lower = sum(Lower, na.rm = TRUE),
`Mobile vendor` = sum(`Mobile vendor`, na.rm = TRUE),
`Stationary small local vendor` = sum(`Stationary small local vendor`, na.rm = TRUE),
Supermarket = sum(Supermarket, na.rm = TRUE)
) %>%
mutate(
higher_perc = round((Higher / total_vendors)*100,2),
middle_perc = round((Middle / total_vendors)*100,2),
lower_perc = round((Lower / total_vendors)*100,2),
mobile_vendor_perc = round((`Mobile vendor` / total_vendors)*100,2),
stationary_small_vendor_perc = round((`Stationary small local vendor` / total_vendors)*100,2),
supermarket_perc = round((Supermarket / total_vendors)*100,2),
city = "Overall"
)
# Append country-level totals and overall totals to the main data and clean up columns
tab1_data_final <- tab1_data %>%
bind_rows(tab1_country_totals) %>%
bind_rows(tab1_overall_totals) %>%
mutate(
neighbourhood_higher = paste0(Higher, " (", higher_perc, "%)"),
neighbourhood_middle = paste0(Middle, " (", middle_perc, "%)"),
neighbourhood_lower = paste0(Lower, " (", lower_perc, "%)"),
storetype_mob = paste0(`Mobile vendor`, " (", mobile_vendor_perc, "%)"),
storetype_stat = paste0(`Stationary small local vendor`, " (", stationary_small_vendor_perc, "%)"),
storetype_super = paste0(Supermarket, " (", supermarket_perc, "%)")
) %>%
select(country, city, total_vendors,
neighbourhood_higher, neighbourhood_middle, neighbourhood_lower,
storetype_mob, storetype_stat, storetype_super)
# Display the table
tab1_data_final
# Export to table_outputs workbook
addWorksheet(table_outputs, "Table 1")
writeData(table_outputs, sheet = "Table 1", x = tab1_data_final)
saveWorkbook(table_outputs, "C:/Users/s1985751/Documents/GitHub/fea/table_outputs.xlsx", overwrite = TRUE)
View(tab4_overall_days)
View(tab4_overall)
tab4a_country_days <- data_clean %>%
group_by(country, org_vendor, days_open_category) %>%
summarise(vendor_count = n(), .groups = "drop") %>%
pivot_wider(names_from = days_open_category, values_from = vendor_count,
values_fill = 0, # Fill missing combinations with 0
names_prefix = "open_") %>%
mutate(
total_vendors = rowSums(select(., starts_with("open_"))),
across(starts_with("open_"), ~ . / total_vendors * 100, .names = "percent_{col}"))
View(tab4a_country_days)
tab4a_country <- data_clean %>%
group_by(country, org_vendor) %>%
summarize(
median_vendor_cashiers = median(vendor_cashiers, na.rm = TRUE),
iqr_vendor_cashiers = IQR(vendor_cashiers, na.rm = TRUE),
min_vendor_cashiers = min(vendor_cashiers, na.rm = TRUE),
max_vendor_cashiers = max(vendor_cashiers, na.rm = TRUE),
median_foods_count = median(foods_count, na.rm = TRUE),
iqr_foods_count = IQR(foods_count, na.rm = TRUE),
min_foods_count = min(foods_count, na.rm = TRUE),
max_foods_count = max(foods_count, na.rm = TRUE)
)
View(tab4a_country)
tab4a_country <- data_clean %>%
group_by(country, org_vendor) %>%
summarize(
median_vendor_cashiers = median(vendor_cashiers, na.rm = TRUE),
iqr_vendor_cashiers = IQR(vendor_cashiers, na.rm = TRUE),
min_vendor_cashiers = min(vendor_cashiers, na.rm = TRUE),
max_vendor_cashiers = max(vendor_cashiers, na.rm = TRUE),
median_foods_count = median(foods_count, na.rm = TRUE),
iqr_foods_count = IQR(foods_count, na.rm = TRUE),
min_foods_count = min(foods_count, na.rm = TRUE),
max_foods_count = max(foods_count, na.rm = TRUE)
) %>%
ungroup() %>%
left_join(tab4_country_days, by = "org_vendor")
tab4a_country <- data_clean %>%
group_by(country, org_vendor) %>%
summarize(
median_vendor_cashiers = median(vendor_cashiers, na.rm = TRUE),
iqr_vendor_cashiers = IQR(vendor_cashiers, na.rm = TRUE),
min_vendor_cashiers = min(vendor_cashiers, na.rm = TRUE),
max_vendor_cashiers = max(vendor_cashiers, na.rm = TRUE),
median_foods_count = median(foods_count, na.rm = TRUE),
iqr_foods_count = IQR(foods_count, na.rm = TRUE),
min_foods_count = min(foods_count, na.rm = TRUE),
max_foods_count = max(foods_count, na.rm = TRUE)
) %>%
ungroup() %>%
left_join(tab4a_country_days, by = c("country","org_vendor"))
tab4a_country <- data_clean %>%
group_by(country, org_vendor) %>%
summarize(
median_vendor_cashiers = median(vendor_cashiers, na.rm = TRUE),
iqr_vendor_cashiers = IQR(vendor_cashiers, na.rm = TRUE),
min_vendor_cashiers = min(vendor_cashiers, na.rm = TRUE),
max_vendor_cashiers = max(vendor_cashiers, na.rm = TRUE),
median_foods_count = median(foods_count, na.rm = TRUE),
iqr_foods_count = IQR(foods_count, na.rm = TRUE),
min_foods_count = min(foods_count, na.rm = TRUE),
max_foods_count = max(foods_count, na.rm = TRUE)
) %>%
ungroup() %>%
left_join(tab4a_country_days, by = c("country","org_vendor")) %>%
mutate(
vendor_cashiers_summary = paste0(median_vendor_cashiers, " (", iqr_vendor_cashiers, "), ",
min_vendor_cashiers, " - ", max_vendor_cashiers),
foods_count_summary = paste0(median_foods_count, " (", iqr_foods_count, "), ",
min_foods_count, " - ", max_foods_count),
days_open_1_3_summary = paste0(`open_1-3`, " (",
ifelse(`percent_open_1-3` < 1, round(`percent_open_1-3`, 1), round(`percent_open_1-3`)),
"%)"),
days_open_4_5_summary = paste0(`open_4-5`, " (",
ifelse(`percent_open_4-5` < 1, round(`percent_open_4-5`, 1), round(`percent_open_4-5`)),
"%)"),
days_open_6_7_summary = paste0(`open_6-7`, " (",
ifelse(`percent_open_6-7` < 1, round(`percent_open_6-7`, 1), round(`percent_open_6-7`)),
"%)"),
) %>%
select(org_vendor, vendor_cashiers_summary, days_open_1_3_summary,
days_open_4_5_summary, days_open_6_7_summary, foods_count_summary) %>%
mutate(org_vendor = recode(org_vendor, '1' = 'Organic','0' = 'Non-organic'))
tab4a_country <- data_clean %>%
group_by(country, org_vendor) %>%
summarize(
median_vendor_cashiers = median(vendor_cashiers, na.rm = TRUE),
iqr_vendor_cashiers = IQR(vendor_cashiers, na.rm = TRUE),
min_vendor_cashiers = min(vendor_cashiers, na.rm = TRUE),
max_vendor_cashiers = max(vendor_cashiers, na.rm = TRUE),
median_foods_count = median(foods_count, na.rm = TRUE),
iqr_foods_count = IQR(foods_count, na.rm = TRUE),
min_foods_count = min(foods_count, na.rm = TRUE),
max_foods_count = max(foods_count, na.rm = TRUE)
) %>%
ungroup() %>%
left_join(tab4a_country_days, by = c("country","org_vendor")) %>%
mutate(
country = country,
vendor_cashiers_summary = paste0(median_vendor_cashiers, " (", iqr_vendor_cashiers, "), ",
min_vendor_cashiers, " - ", max_vendor_cashiers),
foods_count_summary = paste0(median_foods_count, " (", iqr_foods_count, "), ",
min_foods_count, " - ", max_foods_count),
days_open_1_3_summary = paste0(`open_1-3`, " (",
ifelse(`percent_open_1-3` < 1, round(`percent_open_1-3`, 1), round(`percent_open_1-3`)),
"%)"),
days_open_4_5_summary = paste0(`open_4-5`, " (",
ifelse(`percent_open_4-5` < 1, round(`percent_open_4-5`, 1), round(`percent_open_4-5`)),
"%)"),
days_open_6_7_summary = paste0(`open_6-7`, " (",
ifelse(`percent_open_6-7` < 1, round(`percent_open_6-7`, 1), round(`percent_open_6-7`)),
"%)"),
) %>%
select(org_vendor, vendor_cashiers_summary, days_open_1_3_summary,
days_open_4_5_summary, days_open_6_7_summary, foods_count_summary) %>%
mutate(org_vendor = recode(org_vendor, '1' = 'Organic','0' = 'Non-organic'))
tab4a_country <- data_clean %>%
group_by(country, org_vendor) %>%
summarize(
median_vendor_cashiers = median(vendor_cashiers, na.rm = TRUE),
iqr_vendor_cashiers = IQR(vendor_cashiers, na.rm = TRUE),
min_vendor_cashiers = min(vendor_cashiers, na.rm = TRUE),
max_vendor_cashiers = max(vendor_cashiers, na.rm = TRUE),
median_foods_count = median(foods_count, na.rm = TRUE),
iqr_foods_count = IQR(foods_count, na.rm = TRUE),
min_foods_count = min(foods_count, na.rm = TRUE),
max_foods_count = max(foods_count, na.rm = TRUE)
) %>%
ungroup() %>%
left_join(tab4a_country_days, by = c("country","org_vendor"))
tab4a_country <- data_clean %>%
group_by(country, org_vendor) %>%
summarize(
median_vendor_cashiers = median(vendor_cashiers, na.rm = TRUE),
iqr_vendor_cashiers = IQR(vendor_cashiers, na.rm = TRUE),
min_vendor_cashiers = min(vendor_cashiers, na.rm = TRUE),
max_vendor_cashiers = max(vendor_cashiers, na.rm = TRUE),
median_foods_count = median(foods_count, na.rm = TRUE),
iqr_foods_count = IQR(foods_count, na.rm = TRUE),
min_foods_count = min(foods_count, na.rm = TRUE),
max_foods_count = max(foods_count, na.rm = TRUE)
) %>%
ungroup() %>%
left_join(tab4a_country_days, by = c("country","org_vendor")) %>%
mutate(
vendor_cashiers_summary = paste0(median_vendor_cashiers, " (", iqr_vendor_cashiers, "), ",
min_vendor_cashiers, " - ", max_vendor_cashiers),
foods_count_summary = paste0(median_foods_count, " (", iqr_foods_count, "), ",
min_foods_count, " - ", max_foods_count),
days_open_1_3_summary = paste0(`open_1-3`, " (",
ifelse(`percent_open_1-3` < 1, round(`percent_open_1-3`, 1), round(`percent_open_1-3`)),
"%)"),
days_open_4_5_summary = paste0(`open_4-5`, " (",
ifelse(`percent_open_4-5` < 1, round(`percent_open_4-5`, 1), round(`percent_open_4-5`)),
"%)"),
days_open_6_7_summary = paste0(`open_6-7`, " (",
ifelse(`percent_open_6-7` < 1, round(`percent_open_6-7`, 1), round(`percent_open_6-7`)),
"%)"),
) %>%
select(country, org_vendor, vendor_cashiers_summary, days_open_1_3_summary,
days_open_4_5_summary, days_open_6_7_summary, foods_count_summary) %>%
mutate(org_vendor = recode(org_vendor, '1' = 'Organic','0' = 'Non-organic'))
tab4_country_days <- data_clean %>%
group_by(country, org_vendor, days_open_category) %>%
summarise(vendor_count = n(), .groups = "drop") %>%
pivot_wider(names_from = days_open_category, values_from = vendor_count,
values_fill = 0, # Fill missing combinations with 0
names_prefix = "open_") %>%
mutate(
total_vendors = rowSums(select(., starts_with("open_"))),
across(starts_with("open_"), ~ . / total_vendors * 100, .names = "percent_{col}"))
tab4_country <- data_clean %>%
group_by(country, org_vendor) %>%
summarize(
median_vendor_cashiers = median(vendor_cashiers, na.rm = TRUE),
iqr_vendor_cashiers = IQR(vendor_cashiers, na.rm = TRUE),
min_vendor_cashiers = min(vendor_cashiers, na.rm = TRUE),
max_vendor_cashiers = max(vendor_cashiers, na.rm = TRUE),
median_foods_count = median(foods_count, na.rm = TRUE),
iqr_foods_count = IQR(foods_count, na.rm = TRUE),
min_foods_count = min(foods_count, na.rm = TRUE),
max_foods_count = max(foods_count, na.rm = TRUE)
) %>%
ungroup() %>%
left_join(tab4a_country_days, by = c("country","org_vendor")) %>%
mutate(
vendor_cashiers_summary = paste0(median_vendor_cashiers, " (", iqr_vendor_cashiers, "), ",
min_vendor_cashiers, " - ", max_vendor_cashiers),
foods_count_summary = paste0(median_foods_count, " (", iqr_foods_count, "), ",
min_foods_count, " - ", max_foods_count),
days_open_1_3_summary = paste0(`open_1-3`, " (",
ifelse(`percent_open_1-3` < 1, round(`percent_open_1-3`, 1), round(`percent_open_1-3`)),
"%)"),
days_open_4_5_summary = paste0(`open_4-5`, " (",
ifelse(`percent_open_4-5` < 1, round(`percent_open_4-5`, 1), round(`percent_open_4-5`)),
"%)"),
days_open_6_7_summary = paste0(`open_6-7`, " (",
ifelse(`percent_open_6-7` < 1, round(`percent_open_6-7`, 1), round(`percent_open_6-7`)),
"%)"),
) %>%
select(country, org_vendor, vendor_cashiers_summary, days_open_1_3_summary,
days_open_4_5_summary, days_open_6_7_summary, foods_count_summary) %>%
mutate(org_vendor = recode(org_vendor, '1' = 'Organic','0' = 'Non-organic'))
# Display the overall results
print(tab4_country)
tab4_country_days <- data_clean %>%
group_by(country, org_vendor, days_open_category) %>%
summarise(vendor_count = n(), .groups = "drop") %>%
pivot_wider(names_from = days_open_category, values_from = vendor_count,
values_fill = 0, # Fill missing combinations with 0
names_prefix = "open_") %>%
mutate(
total_vendors = rowSums(select(., starts_with("open_"))),
across(starts_with("open_"), ~ . / total_vendors * 100, .names = "percent_{col}"))
tab4_country <- data_clean %>%
group_by(country, org_vendor) %>%
summarize(
median_vendor_cashiers = median(vendor_cashiers, na.rm = TRUE),
iqr_vendor_cashiers = IQR(vendor_cashiers, na.rm = TRUE),
min_vendor_cashiers = min(vendor_cashiers, na.rm = TRUE),
max_vendor_cashiers = max(vendor_cashiers, na.rm = TRUE),
median_foods_count = median(foods_count, na.rm = TRUE),
iqr_foods_count = IQR(foods_count, na.rm = TRUE),
min_foods_count = min(foods_count, na.rm = TRUE),
max_foods_count = max(foods_count, na.rm = TRUE)
) %>%
ungroup() %>%
left_join(tab4a_country_days, by = c("country","org_vendor")) %>%
mutate(
vendor_cashiers_summary = paste0(median_vendor_cashiers, " (", iqr_vendor_cashiers, "), ",
min_vendor_cashiers, " - ", max_vendor_cashiers),
foods_count_summary = paste0(median_foods_count, " (", iqr_foods_count, "), ",
min_foods_count, " - ", max_foods_count),
days_open_1_3_summary = paste0(`open_1-3`, " (",
ifelse(`percent_open_1-3` < 1, round(`percent_open_1-3`, 1), round(`percent_open_1-3`)),
"%)"),
days_open_4_5_summary = paste0(`open_4-5`, " (",
ifelse(`percent_open_4-5` < 1, round(`percent_open_4-5`, 1), round(`percent_open_4-5`)),
"%)"),
days_open_6_7_summary = paste0(`open_6-7`, " (",
ifelse(`percent_open_6-7` < 1, round(`percent_open_6-7`, 1), round(`percent_open_6-7`)),
"%)"),
) %>%
select(country, org_vendor, vendor_cashiers_summary, days_open_1_3_summary,
days_open_4_5_summary, days_open_6_7_summary, foods_count_summary) %>%
mutate(org_vendor = recode(org_vendor, '1' = 'Organic','0' = 'Non-organic'))
# Display the overall results
print(tab4_country)
writeData(table_outputs, sheet = "Table 4 - country", x = tab4_country)
saveWorkbook(table_outputs, "C:/Users/s1985751/Documents/GitHub/fea/table_outputs.xlsx", overwrite = TRUE)
