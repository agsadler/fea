# Boxplot layer
geom_boxplot(position = position_dodge(width = 0.8), outlier.shape = NA) +
# Jittered points layer
geom_jitter(
position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.8),
size = 0.5,
alpha = 0.6,
color = "black"
) +
# Customizations
labs(
x = "Country",
y = "Price (per kg, USD)"
)
# Create boxplot with points
ggplot(tab5_long, aes(x = country, y = Price, fill = Type)) +
# Boxplot layer
geom_boxplot(position = position_dodge(width = 0.8), outlier.shape = NA) +
# Jittered points layer
geom_jitter(
position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.8),
size = 1,
alpha = 0.6,
color = "black"
) +
# Customizations
labs(
x = "Country",
y = "Price (per kg, USD)"
)
# Create boxplot with points
ggplot(tab5_long, aes(x = country, y = Price, fill = Type)) +
# Boxplot layer
geom_boxplot(position = position_dodge(width = 0.8), outlier.shape = NA) +
# Jittered points layer
geom_jitter(
position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.8),
size = 1,
color = "black"
) +
# Customizations
labs(
x = "Country",
y = "Price (per kg, USD)"
)
# Create boxplot with points
ggplot(tab5_long, aes(x = country, y = Price, fill = Type)) +
# Boxplot layer
geom_boxplot(position = position_dodge(width = 0.8), outlier.shape = NA) +
# Jittered points layer
geom_jitter(
position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.8),
size = 0.75,
color = "black"
) +
# Customizations
labs(
x = "Country",
y = "Price (per kg, USD)"
)
# Create boxplot with medians labelled
ggplot(tab5_long, aes(x = country, y = Price, fill = Type)) +
# Boxplot layer
geom_boxplot(position = position_dodge(width = 0.8), outlier.shape = NA) +
#  # Jittered points layer
#  geom_jitter(
#    position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.8),
#    size = 1.5,
#    alpha = 0.6,
#    color = "black"
#  ) +
# Add median labels
stat_summary(
fun = median,                                       # Function to calculate median
geom = "text",                                      # Add as text labels
aes(label = sprintf("%.2f", ..y..)),                # Format median to 2 decimal places
position = position_dodge(width = 0.8),             # Ensure alignment with boxes
vjust = -0.5,                                       # Adjust vertical position
color = "black",                                    # Text color
size = 3                                            # Text size
) +
# Customizations
labs(
x = "Country",
y = "Price (per kg, USD)"
)
# Create boxplot with points
ggplot(tab5_long, aes(x = country, y = Price, fill = Type)) +
# Boxplot layer
geom_boxplot(position = position_dodge(width = 0.8), outlier.shape = NA) +
# Jittered points layer
geom_jitter(
position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.8),
size = 0.75,
color = "black"
) +
# Customizations
labs(
x = "Country",
y = "Price (per kg, USD)"
)
# Create boxplot with points
ggplot(tab5_long, aes(x = country, y = Price, fill = Type)) +
# Boxplot layer
geom_boxplot(position = position_dodge(width = 0.8), outlier.shape = NA) +
# Jittered points layer
geom_jitter(
position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.8),
size = 0.75,
color = "black"
) +
# Customizations
labs(
x = "Country",
y = "Price (per kg, USD)"
) +
scale_fill_manual(
values = c("org" = "skyblue", "conv" = "lightgreen"),
labels = c("Organic", "Conventional")
)
# Create boxplot with points
ggplot(tab5_long, aes(x = country, y = Price, fill = Type)) +
# Boxplot layer
geom_boxplot(position = position_dodge(width = 0.8), outlier.shape = NA) +
# Jittered points layer
geom_jitter(
position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.8),
size = 0.75,
color = "black"
) +
# Customizations
labs(
x = "Country",
y = "Price (per kg, USD)"
) +
scale_fill_manual(
values = c("Organic" = "skyblue", "Conventional" = "lightgreen") # Set custom colors
)
# Create boxplot with points
ggplot(tab5_long, aes(x = country, y = Price, fill = Type)) +
# Boxplot layer
geom_boxplot(position = position_dodge(width = 0.8), outlier.shape = NA) +
# Jittered points layer
geom_jitter(
position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.8),
size = 0.75,
color = "black"
) +
# Customizations
labs(
x = "Country",
y = "Price (per kg, USD)"
) +
scale_fill_manual(
values = c("Organic" = "skyblue", "Conventional" = "lightgreen") # Set custom colors
) +
theme_light()
# Create boxplot with points
ggplot(tab5_long, aes(x = country, y = Price, fill = Type)) +
# Boxplot layer
geom_boxplot(position = position_dodge(width = 0.8), outlier.shape = NA) +
# Jittered points layer
geom_jitter(
position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.8),
size = 0.75,
color = "black"
) +
# Customizations
labs(
x = "Country",
y = "Price (per kg, USD)"
) +
scale_fill_manual(
values = c("Organic" = "skyblue", "Conventional" = "lightgreen") # Set custom colors
)
# Save the plot
ggsave(
filename = "boxplot_with_points.png",
path = "C:/Users/s1985751/Documents/GitHub/fea/Outputs",
dpi = 300
)
# Create new dataset in longer format
tab5_long <- rice_prices_data %>%
select(id, country, rice_price_both, rice_price_conv_kg_usd, rice_price_org_kg_usd) %>%
pivot_longer(
cols = c(rice_price_conv_kg_usd, rice_price_org_kg_usd), # Select columns for conventional and organic prices
names_to = "Type",
values_to = "Price"
) %>%
drop_na(Price) %>% # Remove rows where Price is NA
mutate(Type = case_when(
Type == "rice_price_conv_kg_usd" ~ "Conventional",
Type == "rice_price_org_kg_usd" ~ "Organic"
))
# Create boxplot with points
ggplot(tab5_long, aes(x = country, y = Price, fill = Type)) +
# Boxplot layer
geom_boxplot(position = position_dodge(width = 0.8), outlier.shape = NA) +
# Jittered points layer
geom_jitter(
position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.8),
size = 0.75,
color = "black"
) +
# Customizations
labs(
x = "Country",
y = "Price (per kg, USD)"
) +
scale_fill_manual(
values = c("Organic" = "skyblue", "Conventional" = "lightgreen") # Set custom colors
)
# Save the plot
ggsave(
filename = "boxplot_with_points.png",
path = "C:/Users/s1985751/Documents/GitHub/fea/Outputs",
dpi = 300
)
# Create boxplot with medians labelled
ggplot(tab5_long, aes(x = country, y = Price, fill = Type)) +
# Boxplot layer
geom_boxplot(position = position_dodge(width = 0.8), outlier.shape = NA) +
#  # Jittered points layer
#  geom_jitter(
#    position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.8),
#    size = 1.5,
#    alpha = 0.6,
#    color = "black"
#  ) +
# Add median labels
stat_summary(
fun = median,                                       # Function to calculate median
geom = "text",                                      # Add as text labels
aes(label = sprintf("%.2f", ..y..)),                # Format median to 2 decimal places
position = position_dodge(width = 0.8),             # Ensure alignment with boxes
vjust = -0.5,                                       # Adjust vertical position
color = "black",                                    # Text color
size = 3                                            # Text size
) +
# Customizations
labs(
x = "Country",
y = "Price (per kg, USD)"
)
# Create violin plot
ggplot(tab5_long, aes(x = country, y = Price, fill = Type)) +
# Violin plot layer
geom_violin(position = position_dodge(width = 0.8), outlier.shape = NA)
# Export to table_outputs workbook
#addWorksheet(table_outputs, "Table 5 - country")
#writeData(table_outputs, sheet = "Table 5 - country", x = tab5_country)
#saveWorkbook(table_outputs, "C:/Users/s1985751/Documents/GitHub/fea/table_outputs.xlsx", overwrite = TRUE)
# Save the plot
ggsave(
filename = "boxplot_with_points.png",
path = "C:/Users/s1985751/Documents/GitHub/fea/Outputs",
width = 8,
height = 6,
dpi = 300
)
# Create boxplot with points
ggplot(tab5_long, aes(x = country, y = Price, fill = Type)) +
# Boxplot layer
geom_boxplot(position = position_dodge(width = 0.8), outlier.shape = NA) +
# Jittered points layer
geom_jitter(
position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.8),
size = 0.75,
color = "black"
) +
# Customizations
labs(
x = "Country",
y = "Price (per kg, USD)"
) +
scale_fill_manual(
values = c("Organic" = "skyblue", "Conventional" = "lightgreen") # Set custom colors
)
# Save the plot
ggsave(
filename = "boxplot_with_points.png",
path = "C:/Users/s1985751/Documents/GitHub/fea/Outputs",
width = 8,
height = 6,
dpi = 300
)
# Create new dataset in longer format
tab5_long <- rice_prices_data %>%
select(id, country, rice_price_both, rice_price_conv_kg_usd, rice_price_org_kg_usd) %>%
pivot_longer(
cols = c(rice_price_conv_kg_usd, rice_price_org_kg_usd), # Select columns for conventional and organic prices
names_to = "Type",
values_to = "Price"
) %>%
drop_na(Price) %>% # Remove rows where Price is NA
mutate(Type = case_when(
Type == "rice_price_conv_kg_usd" ~ "Conventional",
Type == "rice_price_org_kg_usd" ~ "Organic"
))
# Create boxplot with points
ggplot(tab5_long, aes(x = country, y = Price, fill = Type)) +
# Boxplot layer
geom_boxplot(position = position_dodge(width = 0.8), outlier.shape = NA) +
# Jittered points layer
geom_jitter(
position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.8),
size = 0.75,
color = "black"
) +
# Customizations
labs(
x = "Country",
y = "Price (per kg, USD)"
) +
scale_fill_manual(
values = c("Organic" = "skyblue", "Conventional" = "lightgreen") # Set custom colors
)
# Save the plot
ggsave(
filename = "boxplot_with_points.png",
path = "C:/Users/s1985751/Documents/GitHub/fea/Outputs",
width = 8,
height = 6,
dpi = 300
)
# Create boxplot with medians labelled
ggplot(tab5_long, aes(x = country, y = Price, fill = Type)) +
# Boxplot layer
geom_boxplot(position = position_dodge(width = 0.8), outlier.shape = NA) +
#  # Jittered points layer
#  geom_jitter(
#    position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.8),
#    size = 1.5,
#    alpha = 0.6,
#    color = "black"
#  ) +
# Add median labels
stat_summary(
fun = median,                                       # Function to calculate median
geom = "text",                                      # Add as text labels
aes(label = sprintf("%.2f", ..y..)),                # Format median to 2 decimal places
position = position_dodge(width = 0.8),             # Ensure alignment with boxes
vjust = -0.5,                                       # Adjust vertical position
color = "black",                                    # Text color
size = 3                                            # Text size
) +
# Customizations
labs(
x = "Country",
y = "Price (per kg, USD)"
)
# Save the plot
ggsave(
filename = "boxplot_medians.png",
path = "C:/Users/s1985751/Documents/GitHub/fea/Outputs",
width = 8,
height = 6,
dpi = 300
)
# Create violin plot
ggplot(tab5_long, aes(x = country, y = Price, fill = Type)) +
# Violin plot layer
geom_violin(position = position_dodge(width = 0.8), outlier.shape = NA)
# Save the plot
ggsave(
filename = "violinplot.png",
path = "C:/Users/s1985751/Documents/GitHub/fea/Outputs",
width = 8,
height = 6,
dpi = 300
)
# Export to table_outputs workbook
#addWorksheet(table_outputs, "Table 5 - country")
#writeData(table_outputs, sheet = "Table 5 - country", x = tab5_country)
#saveWorkbook(table_outputs, "C:/Users/s1985751/Documents/GitHub/fea/table_outputs.xlsx", overwrite = TRUE)
# Create boxplot with points
ggplot(tab5_long, aes(x = country, y = Price, fill = Type)) +
# Boxplot layer
geom_boxplot(position = position_dodge(width = 0.8), outlier.shape = NA) +
# Jittered points layer
geom_jitter(
position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.8),
size = 0.75,
color = "grey"
) +
# Customizations
labs(
x = "Country",
y = "Price (per kg, USD)"
) +
scale_fill_manual(
values = c("Organic" = "skyblue", "Conventional" = "lightgreen") # Set custom colors
)
# Create boxplot with points
ggplot(tab5_long, aes(x = country, y = Price, fill = Type)) +
# Boxplot layer
geom_boxplot(position = position_dodge(width = 0.8), outlier.shape = NA) +
# Jittered points layer
geom_jitter(
position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.8),
size = 0.5,
color = "black"
) +
# Customizations
labs(
x = "Country",
y = "Price (per kg, USD)"
) +
scale_fill_manual(
values = c("Organic" = "skyblue", "Conventional" = "lightgreen") # Set custom colors
)
# Save the plot
ggsave(
filename = "boxplot_with_points.png",
path = "C:/Users/s1985751/Documents/GitHub/fea/Outputs",
width = 8,
height = 6,
dpi = 300
)
# Define order of neighbourhood variable
circle_order <- c("Higher","Middle","Lower")
# Convert the circle column to a factor with the specified levels
tab2_data <- data_clean %>%
mutate(circle = factor(circle, levels = circle_order))
View(tab2_data)
# Convert the circle column to a factor with the specified levels
tab2_data <- data_clean %>%
mutate(circle = factor(circle, levels = circle_order)) %>%
select(id, country, city, circle, org_vendor)
# Convert the circle column to a factor with the specified levels
tab2_fig_data <- data_clean %>%
mutate(circle = factor(circle, levels = circle_order)) %>%
select(id, country, city, circle, org_vendor)
# Create table of neighbourhood data
tab2_fig_neighbourhood <- tab2_fig_data %>%
group_by(country, city, circle) %>%
summarise(
vendors = n(),
count_org_vendors = sum(org_vendor == 1, na.rm = TRUE),
org_vendor_perc = count_org_vendors / vendors
) %>%
ungroup()
View(tab2_fig_data)
View(tab2_fig_neighbourhood)
# Create workbook for table data
table_outputs <- createWorkbook()
saveWorkbook(table_outputs, "Outputs/table_outputs.xlsx", overwrite = TRUE)
# Export to table_outputs workbook
addWorksheet(table_outputs, "Table 2 - Figure")
writeData(table_outputs, sheet = "Table 2 - Figure", x = tab2_fig_neighbourhood)
saveWorkbook(table_outputs, "C:/Users/s1985751/Documents/GitHub/fea/table_outputs.xlsx", overwrite = TRUE)
# Define order of neighbourhood variable
circle_order <- c("Higher","Middle","Lower")
# Convert the circle column to a factor with the specified levels
tab2_fig_data <- data_clean %>%
mutate(circle = factor(circle, levels = circle_order)) %>%
select(id, country, city, circle, org_vendor)
# Create table of neighbourhood data
tab2_fig_neighbourhood <- tab2_fig_data %>%
group_by(country, city, circle) %>%
summarise(
vendors = n(),
count_org_vendors = sum(org_vendor == 1, na.rm = TRUE),
org_vendor_perc = count_org_vendors / vendors
) %>%
ungroup()
# Export to table_outputs workbook
addWorksheet(table_outputs, "Table 2 - Figure")
writeData(table_outputs, sheet = "Table 2 - Figure", x = tab2_fig_neighbourhood)
saveWorkbook(table_outputs, "C:/Users/s1985751/Documents/GitHub/fea/table_outputs.xlsx", overwrite = TRUE)
# Create scatterplot stacked by country
ggplot(data, aes(x = circle, y = org_vendor_perc, color = circle)) +
geom_point(size = 3, alpha = 0.8) +         # Scatter points
facet_wrap(~ country, scales = "free_y") +  # Facet countries in separate rows
labs(
x = "Neighbourhood",
y = "Organic Vendor Percentage"
) +
theme_light() +
theme(
strip.text = element_text(size = 12, face = "bold"),  # Country panel titles
axis.text.x = element_text(angle = 45, hjust = 1),   # Rotated x-axis labels
legend.position = "none"                             # Remove legend for 'Circle'
)
# Create scatterplot stacked by country
ggplot(tab2_fig_neighbourhood, aes(x = circle, y = org_vendor_perc, color = circle)) +
geom_point(size = 3, alpha = 0.8) +         # Scatter points
facet_wrap(~ country, scales = "free_y") +  # Facet countries in separate rows
labs(
x = "Neighbourhood",
y = "Organic Vendor Percentage"
) +
theme_light() +
theme(
strip.text = element_text(size = 12, face = "bold"),  # Country panel titles
axis.text.x = element_text(angle = 45, hjust = 1),   # Rotated x-axis labels
legend.position = "none"                             # Remove legend for 'Circle'
)
# Create scatterplot stacked by country
ggplot(tab2_fig_neighbourhood, aes(x = circle, y = org_vendor_perc, color = circle)) +
geom_point(size = 3, alpha = 0.8) +         # Scatter points
facet_wrap(~ country, ncol = 1, scales = "free_y") +  # Facet countries in separate rows
labs(
x = "Neighbourhood",
y = "Organic Vendor Percentage"
) +
theme_light() +
theme(
strip.text = element_text(size = 12, face = "bold"),  # Country panel titles
axis.text.x = element_text(angle = 45, hjust = 1),   # Rotated x-axis labels
legend.position = "none"                             # Remove legend for 'Circle'
)
