# Load necessary libraries
library(dplyr)
library(ggplot2)
library(gmodels)
library(grid)
library(gridExtra)
library(gt)
library(knitr)
library(kableExtra)
library(openxlsx)
library(readxl)
library(readr)
library(stats)
library(tidyr)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
# Load cleaned data
data_clean <- read.xlsx("data_clean.xlsx", sheet = "data")
# Create new instance of dataset for Table 6
tab3_data <- data_clean
# Vector of product abbreviations
products <- c("tom", "leaf", "ban", "man", "fj", "milk", "cof", "tea", "mill", "chic", "daal", "wht", "rice", "nut")
# Vector of countries
countries <- c("Brazil", "India", "UK", "Overall")
# Define a function to create the category summary for a given dataset
create_category_summary <- function(data) {
# PRODUCT-LEVEL SUMMARY
# Define a function to summarize data for a given product and dataset
tab3_product_summary_list <- lapply(products, function(product) {
data %>%
summarise(
org_count = sum(get(paste0(product, "_org")) == "Yes", na.rm = TRUE),
term_organic_count = sum(get(paste0(product, "_org_terms_Organic")) == 1, na.rm = TRUE),
term_organic_perc = term_organic_count / org_count,
term_natural_count = sum(get(paste0(product, "_org_terms_Natural")) == 1, na.rm = TRUE),
term_natural_perc = term_natural_count / org_count,
term_chemfree_count = sum(get(paste0(product, "_org_terms_Chemical-free")) == 1, na.rm = TRUE),
term_chemfree_perc = term_chemfree_count / org_count,
term_pestfree_count = sum(get(paste0(product, "_org_terms_Pesticide-free")) == 1, na.rm = TRUE),
term_pestfree_perc = term_pestfree_count / org_count,
term_bioprod_count = sum(get(paste0(product, "_org_terms_Bioproducts")) == 1, na.rm = TRUE),
term_bioprod_perc = term_bioprod_count / org_count,
term_bio_count = sum(get(paste0(product, "_org_terms_Bio")) == 1, na.rm = TRUE),
term_bio_perc = term_bio_count / org_count,
term_eco_count = sum(get(paste0(product, "_org_terms_Eco")) == 1, na.rm = TRUE),
term_eco_perc = term_eco_count / org_count,
term_gmo_count = sum(get(paste0(product, "_org_terms_GMO-free")) == 1, na.rm = TRUE),
term_gmo_perc = term_gmo_count / org_count,
#term_dontknow_count = sum(get(paste0(product, "_org_terms_Don't know")) == 1, na.rm = TRUE),
#term_dontknow_perc = term_dontknow_count / org_count
) %>%
mutate(
product = product,
category = case_when(product %in% c("fj", "milk", "cof", "tea") ~ "beverages",
product %in% c("tom", "leaf", "ban", "man") ~ "fresh produce",
TRUE ~ "other")
) %>%
select(category, product, everything())
})
tab3_product_summary <- bind_rows(tab3_product_summary_list)
# Apply the function to each product and combine the results
#product_summary_list <- lapply(products, tab3_product_fn)
#tab3_product_summary <- bind_rows(product_summary_list)
## CATEGORY-LEVEL SUMMARY
tab3_category_summary <- tab3_product_summary %>%
group_by(category) %>%
summarise(
cat_org_count = sum(org_count, na.rm = TRUE),
cat_term_organic_count = sum(term_organic_count, na.rm = TRUE),
cat_term_organic_perc = cat_term_organic_count / cat_org_count,
cat_term_natural_count = sum(term_natural_count, na.rm = TRUE),
cat_term_natural_perc = cat_term_natural_count / cat_org_count,
cat_term_chemfree_count = sum(term_chemfree_count, na.rm = TRUE),
cat_term_chemfree_perc = cat_term_chemfree_count / cat_org_count,
cat_term_pestfree_count = sum(term_pestfree_count, na.rm = TRUE),
cat_term_pestfree_perc = cat_term_pestfree_count / cat_org_count,
cat_term_bioprod_count = sum(term_bioprod_count, na.rm = TRUE),
cat_term_bioprod_perc = cat_term_bioprod_count / cat_org_count,
cat_term_bio_count = sum(term_bio_count, na.rm = TRUE),
cat_term_bio_perc = cat_term_bio_count / cat_org_count,
cat_term_eco_count = sum(term_eco_count, na.rm = TRUE),
cat_term_eco_perc = cat_term_eco_count / cat_org_count,
cat_term_gmo_count = sum(term_gmo_count, na.rm = TRUE),
cat_term_gmo_perc = cat_term_gmo_count / cat_org_count,
#term_dontknow_count = sum(term_dontknow_count, na.rm = TRUE),
#term_dontknow_perc = mean(term_dontknow_perc, na.rm = TRUE)
)
# Calculate the totals across all categories
totals_row <- tab3_category_summary %>%
summarise(
category = "Total",
cat_org_count = sum(cat_org_count, na.rm = TRUE),
cat_term_organic_count = sum(cat_term_organic_count, na.rm = TRUE),
cat_term_organic_perc = cat_term_organic_count / cat_org_count,
cat_term_natural_count = sum(cat_term_natural_count, na.rm = TRUE),
cat_term_natural_perc = cat_term_natural_count / cat_org_count,
cat_term_chemfree_count = sum(cat_term_chemfree_count, na.rm = TRUE),
cat_term_chemfree_perc = cat_term_chemfree_count / cat_org_count,
cat_term_pestfree_count = sum(cat_term_pestfree_count, na.rm = TRUE),
cat_term_pestfree_perc = cat_term_pestfree_count / cat_org_count,
cat_term_bioprod_count = sum(cat_term_bioprod_count, na.rm = TRUE),
cat_term_bioprod_perc = cat_term_bioprod_count / cat_org_count,
cat_term_bio_count = sum(cat_term_bio_count, na.rm = TRUE),
cat_term_bio_perc = cat_term_bio_count / cat_org_count,
cat_term_eco_count = sum(cat_term_eco_count, na.rm = TRUE),
cat_term_eco_perc = cat_term_eco_count / cat_org_count,
cat_term_gmo_count = sum(cat_term_gmo_count, na.rm = TRUE),
cat_term_gmo_perc = cat_term_gmo_count / cat_org_count
# term_dontknow_count = sum(term_dontknow_count, na.rm = TRUE),
# term_dontknow_perc = mean(term_dontknow_perc, na.rm = TRUE)
)
# Append the totals row to the category summary table
tab3_category_summary <- bind_rows(tab3_category_summary, totals_row)
return(tab3_category_summary)
}
# Run the function for each country and combine results into one table
results_list <- lapply(countries, function(country) {
if (country == "Overall") {
data <- tab3_data
} else {
# Ensure filtering by country works
data <- tab3_data %>% filter(country == !!country)
}
summary_table <- create_category_summary(data)
summary_table %>%
mutate(country = country) %>%
select(country, everything())
})
# Combine all results
tab3_combined_summary <- bind_rows(results_list)
# Mutate to combine and clean up columns
tab3_combined_summary <- tab3_combined_summary %>%
mutate(
term_organic = paste0(cat_term_organic_count, " (", round(cat_term_organic_perc * 100,1), "%)"),
term_natural = paste0(cat_term_natural_count, " (", round(cat_term_natural_perc * 100,1), "%)"),
term_chemfree = paste0(cat_term_chemfree_count, " (", round(cat_term_chemfree_perc * 100,1), "%)"),
term_pestfree = paste0(cat_term_pestfree_count, " (", round(cat_term_pestfree_perc * 100,1), "%)"),
term_bioprod = paste0(cat_term_bioprod_count, " (", round(cat_term_bioprod_perc * 100,1), "%)"),
term_bio = paste0(cat_term_bio_count, " (", round(cat_term_bio_perc * 100,1), "%)"),
term_eco = paste0(cat_term_eco_count, " (", round(cat_term_eco_perc * 100,1), "%)"),
term_gmo = paste0(cat_term_gmo_count, " (", round(cat_term_gmo_perc * 100,1), "%)")
) %>%
select(country, category, cat_org_count, term_organic, term_natural,
term_chemfree, term_pestfree, term_bioprod, term_bio, term_eco, term_gmo)
# View the final combined summary table
tab3_combined_summary
# Export to table_outputs workbook
addWorksheet(table_outputs, "Table 3")
# Create table for bar plot
tab3_fig_data <- bind_rows(results_list)
tab3_fig_data <- tab3_fig_data %>%
filter(category == "Total") %>%
select(country, cat_term_organic_perc, cat_term_natural_perc,
cat_term_chemfree_perc, cat_term_pestfree_perc, cat_term_eco_perc) %>%
rename(
Organic = cat_term_organic_perc,
Natural = cat_term_natural_perc,
`Chemical-free` = cat_term_chemfree_perc,
`Pesticide-free` = cat_term_pestfree_perc,
Eco = cat_term_eco_perc
)
# Create vector of terminology percentage columns
terms <- c("Organic","Natural","Chemical-free", "Pesticide-free", "Eco")
# Convert data to long format
tab3_fig_data_long <- tab3_fig_data %>%
pivot_longer(cols = c(terms),
names_to = "term",
values_to = c("percentage"))
# Ensure the correct order of countries
tab3_fig_data_long$country <- factor(tab3_fig_data_long$country,
levels = c("Brazil", "India", "UK", "Overall"))
# Ensure the correct order of terms
tab3_fig_data_long$term <- factor(tab3_fig_data_long$term,
levels = c("Organic", "Natural", "Chemical-free", "Pesticide-free", "Eco"))
# Establish values for colourblind palette
cbPalette <- c("#88CCEE", "#44AA99", "#117733", "#999933", "#DDCC77", "#CC6677", "#882255", "#AA4499")
# Create barplot
ggplot(data = tab3_fig_data_long, aes(x = country, y = percentage, fill = term)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.9)) +  # Grouped bars
labs(
x = "Terminology",
y = "Proportion of products using terminology",
fill = element_blank()
) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1), limits = c(0, 1)) +
#ylim(0, 1) +
scale_fill_manual(values=cbPalette) +
theme_light(base_size = 14) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),   # Rotated x-axis labels
legend.position = "bottom",
legend.title = element_text(size = 14),
legend.text = element_text(size =14)
)
# Save the full plot with legend
ggsave("tab3_figure.png",
final_plot,
path = "C:/Users/s1985751/Documents/GitHub/fea/Outputs",
width = 12, height = 8, dpi = 300)
# Create barplot
tab3_fig <- ggplot(data = tab3_fig_data_long, aes(x = country, y = percentage, fill = term)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.9)) +  # Grouped bars
labs(
x = "Terminology",
y = "Proportion of products using terminology",
fill = element_blank()
) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1), limits = c(0, 1)) +
#ylim(0, 1) +
scale_fill_manual(values=cbPalette) +
theme_light(base_size = 14) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),   # Rotated x-axis labels
legend.position = "bottom",
legend.title = element_text(size = 14),
legend.text = element_text(size =14)
)
# Create barplot
tab3_fig <- ggplot(data = tab3_fig_data_long, aes(x = country, y = percentage, fill = term)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.9)) +  # Grouped bars
labs(
x = "Terminology",
y = "Proportion of products using terminology",
fill = element_blank()
) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1), limits = c(0, 1)) +
#ylim(0, 1) +
scale_fill_manual(values=cbPalette) +
theme_light(base_size = 14) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),   # Rotated x-axis labels
legend.position = "bottom",
legend.title = element_text(size = 14),
legend.text = element_text(size =14)
)
return(tab3_fig)
tab3_fig
# Save the full plot with legend
ggsave("tab3_figure.png",
tab3_fig,
path = "C:/Users/s1985751/Documents/GitHub/fea/Outputs",
width = 12, height = 8, dpi = 300)
# Define order of neighbourhood variable
circle_order <- c("Higher","Middle","Lower")
# Convert the circle column to a factor with the specified levels
tab2_fig_data <- data_clean %>%
mutate(circle = factor(circle, levels = circle_order)) %>%
select(id, country, city, circle, org_vendor)
# Create table of neighbourhood data
tab2_fig_neighbourhood <- tab2_fig_data %>%
group_by(country, city, circle) %>%
summarise(
vendors = n(),
count_org_vendors = sum(org_vendor == 1, na.rm = TRUE),
org_vendor_perc = count_org_vendors / vendors
) %>%
ungroup()
# # Create grouped bar chart by country
# ggplot(tab2_fig_neighbourhood, aes(x = circle, y = org_vendor_perc, fill = city)) +
#   geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +  # Grouped bars
#   facet_wrap(~ country, ncol = 1, scales = "free_y") +   # Facet countries in separate rows
#   labs(
#     x = "Neighbourhood",
#     y = "Organic Vendor Percentage"
#   ) +
#   theme_light() +
#   theme(
#     strip.text = element_text(size = 12, face = "bold"),  # Country panel titles
#     axis.text.x = element_text(angle = 45, hjust = 1),   # Rotated x-axis labels
#     legend.title = element_text(size = 10),              # Adjust legend title size
#     legend.text = element_text(size = 8),                # Adjust legend text size
#     legend.position = "bottom"                           # Move legend to bottom
#   )
### packages
library(grid)
library(gridExtra)
# Establish values for colourblind palette
cbPalette <- c("#88CCEE", "#44AA99", "#DDCC77", "#117733", "#999933", "#CC6677", "#882255", "#AA4499")
### function to create plot
figure1_function <- function (x) {
p <- ggplot(data = x, aes(x = city, y = org_vendor_perc, fill = circle)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.9)) +  # Grouped bars
labs(
x = element_blank(),
y = element_blank(),
fill = "Neighbourhood income level"
) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1), limits = c(0, 1)) +
#ylim(0, 1) +
scale_fill_manual(values=cbPalette) +
theme_light(base_size = 14) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),   # Rotated x-axis labels
legend.position = "none"                           # no legeng
)
return(p)
}
### create a plot for each country
br <- figure1_function(tab2_fig_neighbourhood %>% filter(country %in% "Brazil")) + ggtitle("Brazil")
india <- figure1_function(tab2_fig_neighbourhood %>% filter(country %in% "India")) + ggtitle("India")
uk <- figure1_function(tab2_fig_neighbourhood %>% filter(country %in% "UK")) + ggtitle("UK")
# shared axis labels
y <- textGrob("Organic Vendor Percentage", rot = 90, gp = gpar(fontsize = 16))
x <- textGrob("City", gp = gpar(fontsize = 16))
# combine plots
combined_plot <- grid.arrange(br, india, uk,
ncol = 3,
left = y,
bottom = x)
# Create a function that extracts legend
get_only_legend <- function(plot) {
# get tabular interpretation of plot
plot_table <- ggplot_gtable(ggplot_build(plot))
#  Mark only legend in plot
legend_plot <- which(sapply(plot_table$grobs, function(x) x$name) == "guide-box")
# extract legend
legend <- plot_table$grobs[[legend_plot]]
# return legend
return(legend)
}
# extract legend from plot1 using above function
legend <- get_only_legend(uk + theme(legend.position = "bottom",
legend.title = element_text(size = 14),
legend.text = element_text(size =14)))
# final combined plot with shared legend
grid.arrange(combined_plot, legend, nrow = 2, heights = c(10, 1))
# Combine plots and legend into a single grob
final_plot <- arrangeGrob(combined_plot, legend, nrow = 2, heights = c(10, 1))
# Save the full plot with legend
ggsave("figure1.png",
final_plot,
path = "C:/Users/s1985751/Documents/GitHub/fea/Outputs",
width = 12, height = 8, dpi = 300)
# Create scatterplot stacked by country
# ggplot(tab2_fig_neighbourhood, aes(x = circle, y = org_vendor_perc, color = circle)) +
#   geom_point(size = 3, alpha = 0.8) +         # Scatter points
#   facet_wrap(~ country, ncol = 1, scales = "free_y") +  # Facet countries in separate rows
#   labs(
#     x = "Neighbourhood",
#     y = "Organic Vendor Percentage"
#   ) +
#   theme_light() +
#   theme(
#     strip.text = element_text(size = 12, face = "bold"),  # Country panel titles
#     axis.text.x = element_text(angle = 45, hjust = 1),   # Rotated x-axis labels
#     legend.position = "none"                             # Remove legend for 'Circle'
#   )
# Export to table_outputs workbook
#addWorksheet(table_outputs, "Table 2 - Figure")
#writeData(table_outputs, sheet = "Table 2 - Figure", x = tab2_fig_neighbourhood)
#saveWorkbook(table_outputs, "C:/Users/s1985751/Documents/GitHub/fea/table_outputs.xlsx", overwrite = TRUE)
